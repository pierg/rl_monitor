digraph _logic_OpponentsRight {
rankdir=LR;
node [shape = circle]; carToTheRight carCloseToTheRight rightFree carFarToTheRight default start;
node [shape = point]; _s_s;
_s_s -> start;
carFarToTheRight -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carFarToTheRight -> carCloseToTheRight [ label = "(2) rlevent\\EchoServer . isRightCarDetectedNearby ( ) \\EchoServer . rewardRightCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carCloseToTheRight ++ ; "];
carFarToTheRight -> carToTheRight [ label = "(3) rlevent\\EchoServer . isRightCarDetected ( ) \\EchoServer . rewardRightCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carToTheRight ++ ; "];
carFarToTheRight -> carFarToTheRight [ label = "(4) rlevent\\EchoServer . isRightCarDetectedFar ( ) \\EchoServer . rewardRightCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carFarToTheRight ++ ; "];
carFarToTheRight -> rightFree [ label = "(5) rlevent\\EchoServer . isRightFree ( ) \\EchoServer . rewardRightFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_rightFree ++ ; "];
carFarToTheRight -> default [ label = "(6) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
default -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
default -> default [ label = "(2) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
start -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
start -> start [ label = "(2) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
start -> carCloseToTheRight [ label = "(3) rlevent\\EchoServer . isRightCarDetectedNearby ( ) \\EchoServer . rewardRightCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carCloseToTheRight ++ ; "];
start -> carToTheRight [ label = "(4) rlevent\\EchoServer . isRightCarDetected ( ) \\EchoServer . rewardRightCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carToTheRight ++ ; "];
start -> carFarToTheRight [ label = "(5) rlevent\\EchoServer . isRightCarDetectedFar ( ) \\EchoServer . rewardRightCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carFarToTheRight ++ ; "];
start -> rightFree [ label = "(6) rlevent\\EchoServer . isRightFree ( ) \\EchoServer . rewardRightFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_rightFree ++ ; "];
start -> default [ label = "(7) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carCloseToTheRight -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carCloseToTheRight -> carFarToTheRight [ label = "(2) rlevent\\EchoServer . isRightCarDetectedFar ( ) \\EchoServer . rewardRightCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carFarToTheRight ++ ; "];
carCloseToTheRight -> rightFree [ label = "(3) rlevent\\EchoServer . isRightFree ( ) \\EchoServer . rewardRightFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_rightFree ++ ; "];
carCloseToTheRight -> carCloseToTheRight [ label = "(4) rlevent\\EchoServer . isRightCarDetectedNearby ( ) \\EchoServer . rewardRightCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carCloseToTheRight ++ ; "];
carCloseToTheRight -> carToTheRight [ label = "(5) rlevent\\EchoServer . isRightCarDetected ( ) \\EchoServer . rewardRightCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carToTheRight ++ ; "];
carCloseToTheRight -> default [ label = "(6) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
rightFree -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
rightFree -> carCloseToTheRight [ label = "(2) rlevent\\EchoServer . isRightCarDetectedNearby ( ) \\EchoServer . rewardRightCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carCloseToTheRight ++ ; "];
rightFree -> carToTheRight [ label = "(3) rlevent\\EchoServer . isRightCarDetected ( ) \\EchoServer . rewardRightCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carToTheRight ++ ; "];
rightFree -> rightFree [ label = "(4) rlevent\\EchoServer . isRightFree ( ) \\EchoServer . rewardRightFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_rightFree ++ ; "];
rightFree -> carFarToTheRight [ label = "(5) rlevent\\EchoServer . isRightCarDetectedFar ( ) \\EchoServer . rewardRightCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carFarToTheRight ++ ; "];
rightFree -> default [ label = "(6) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carToTheRight -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carToTheRight -> rightFree [ label = "(2) rlevent\\EchoServer . isRightFree ( ) \\EchoServer . rewardRightFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_rightFree ++ ; "];
carToTheRight -> carToTheRight [ label = "(3) rlevent\\EchoServer . isRightCarDetected ( ) \\EchoServer . rewardRightCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carToTheRight ++ ; "];
carToTheRight -> carCloseToTheRight [ label = "(4) rlevent\\EchoServer . isRightCarDetectedNearby ( ) \\EchoServer . rewardRightCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carCloseToTheRight ++ ; "];
carToTheRight -> carFarToTheRight [ label = "(5) rlevent\\EchoServer . isRightCarDetectedFar ( ) \\EchoServer . rewardRightCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsRight_carFarToTheRight ++ ; "];
carToTheRight -> default [ label = "(6) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
}