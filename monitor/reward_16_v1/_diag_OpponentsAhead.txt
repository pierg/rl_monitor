digraph _logic_OpponentsAhead {
rankdir=LR;
node [shape = circle]; carCloseAhead carAhead carFarAhead frontFree default start;
node [shape = point]; _s_s;
_s_s -> start;
frontFree -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
frontFree -> carCloseAhead [ label = "(2) rlevent\\EchoServer . isFrontCarDetectedNearby ( ) \\EchoServer . rewardFrontCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carCloseAhead ++ ; "];
frontFree -> carAhead [ label = "(3) rlevent\\EchoServer . isFrontCarDetected ( ) \\EchoServer . rewardFrontCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carAhead ++ ; "];
frontFree -> frontFree [ label = "(4) rlevent\\EchoServer . isFrontFree ( ) \\EchoServer . rewardFrontFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_frontFree ++ ; "];
frontFree -> carFarAhead [ label = "(5) rlevent\\EchoServer . isFrontCarDetectedFar ( ) \\EchoServer . rewardFrontCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carFarAhead ++ ; "];
frontFree -> default [ label = "(6) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
default -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
default -> default [ label = "(2) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carAhead -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carAhead -> frontFree [ label = "(2) rlevent\\EchoServer . isFrontFree ( ) \\EchoServer . rewardFrontFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_frontFree ++ ; "];
carAhead -> carAhead [ label = "(3) rlevent\\EchoServer . isFrontCarDetected ( ) \\EchoServer . rewardFrontCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carAhead ++ ; "];
carAhead -> carCloseAhead [ label = "(4) rlevent\\EchoServer . isFrontCarDetectedNearby ( ) \\EchoServer . rewardFrontCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carCloseAhead ++ ; "];
carAhead -> carFarAhead [ label = "(5) rlevent\\EchoServer . isFrontCarDetectedFar ( ) \\EchoServer . rewardFrontCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carFarAhead ++ ; "];
carAhead -> default [ label = "(6) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carFarAhead -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carFarAhead -> carCloseAhead [ label = "(2) rlevent\\\\EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carCloseAhead ++ ; "];
carFarAhead -> carAhead [ label = "(3) rlevent\\EchoServer . isFrontCarDetected ( ) \\EchoServer . rewardFrontCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carAhead ++ ; "];
carFarAhead -> carFarAhead [ label = "(4) rlevent\\EchoServer . isFrontCarDetectedFar ( ) \\EchoServer . rewardFrontCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carFarAhead ++ ; "];
carFarAhead -> frontFree [ label = "(5) rlevent\\EchoServer . isFrontFree ( ) \\EchoServer . rewardFrontFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_frontFree ++ ; "];
carFarAhead -> default [ label = "(6) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
start -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
start -> start [ label = "(2) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
start -> carCloseAhead [ label = "(3) rlevent\\EchoServer . isFrontCarDetectedNearby ( ) \\EchoServer . rewardFrontCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carCloseAhead ++ ; "];
start -> carAhead [ label = "(4) rlevent\\EchoServer . isFrontCarDetected ( ) \\EchoServer . rewardFrontCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carAhead ++ ; "];
start -> carFarAhead [ label = "(5) rlevent\\EchoServer . isFrontCarDetectedFar ( ) \\EchoServer . rewardFrontCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carFarAhead ++ ; "];
start -> frontFree [ label = "(6) rlevent\\EchoServer . isFrontFree ( ) \\EchoServer . rewardFrontFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_frontFree ++ ; "];
start -> default [ label = "(7) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carCloseAhead -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carCloseAhead -> carFarAhead [ label = "(2) rlevent\\EchoServer . isFrontCarDetectedFar ( ) \\EchoServer . rewardFrontCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carFarAhead ++ ; "];
carCloseAhead -> frontFree [ label = "(3) rlevent\\EchoServer . isFrontFree ( ) \\EchoServer . rewardFrontFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_frontFree ++ ; "];
carCloseAhead -> carCloseAhead [ label = "(4) rlevent\\EchoServer . isFrontCarDetectedNearby ( ) \\EchoServer . rewardFrontCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carCloseAhead ++ ; "];
carCloseAhead -> carAhead [ label = "(5) rlevent\\EchoServer . isFrontCarDetected ( ) \\EchoServer . rewardFrontCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsAhead_carAhead ++ ; "];
carCloseAhead -> default [ label = "(6) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
}