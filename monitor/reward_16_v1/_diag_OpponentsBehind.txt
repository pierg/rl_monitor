digraph _logic_OpponentsBehind {
rankdir=LR;
node [shape = circle]; carCloseBehind carBehind carFarbehind behindFree default start;
node [shape = point]; _s_s;
_s_s -> start;
carBehind -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carBehind -> behindFree [ label = "(2) rlevent\\EchoServer . isFreeBehind ( ) \\EchoServer . rewardBehindFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_behindFree ++ ; "];
carBehind -> carBehind [ label = "(3) rlevent\\EchoServer . isCarDetectedBehind ( ) \\EchoServer . rewardBehindCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carBehind ++ ; "];
carBehind -> carCloseBehind [ label = "(4) rlevent\\EchoServer . isCarDetectedNearbyBehind ( ) \\EchoServer . rewardBehindCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carCloseBehind ++ ; "];
carBehind -> carFarbehind [ label = "(5) rlevent\\EchoServer . isCarDetectedFarBehind ( ) \\EchoServer . rewardBehindCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carFarbehind ++ ; "];
carBehind -> default [ label = "(6) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
default -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
default -> default [ label = "(2) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carFarbehind -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carFarbehind -> carCloseBehind [ label = "(2) rlevent\\EchoServer . isCarDetectedNearbyBehind ( ) \\EchoServer . rewardBehindCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carCloseBehind ++ ; "];
carFarbehind -> carBehind [ label = "(3) rlevent\\EchoServer . isCarDetectedBehind ( ) \\EchoServer . rewardBehindCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carBehind ++ ; "];
carFarbehind -> carFarbehind [ label = "(4) rlevent\\EchoServer . isCarDetectedFarBehind ( ) \\EchoServer . rewardBehindCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carFarbehind ++ ; "];
carFarbehind -> behindFree [ label = "(5) rlevent\\EchoServer . isFreeBehind ( ) \\EchoServer . rewardBehindFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_behindFree ++ ; "];
carFarbehind -> default [ label = "(6) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
start -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
start -> start [ label = "(2) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
start -> carCloseBehind [ label = "(3) rlevent\\EchoServer . isCarDetectedNearbyBehind ( ) \\EchoServer . rewardBehindCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carCloseBehind ++ ; "];
start -> carBehind [ label = "(4) rlevent\\EchoServer . isCarDetectedBehind ( ) \\EchoServer . rewardBehindCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carBehind ++ ; "];
start -> carFarbehind [ label = "(5) rlevent\\EchoServer . isCarDetectedFarBehind ( ) \\EchoServer . rewardBehindCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carFarbehind ++ ; "];
start -> behindFree [ label = "(6) rlevent\\EchoServer . isFreeBehind ( ) \\EchoServer . rewardBehindFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_behindFree ++ ; "];
start -> default [ label = "(7) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carCloseBehind -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
carCloseBehind -> carFarbehind [ label = "(2) rlevent\\EchoServer . isCarDetectedFarBehind ( ) \\EchoServer . rewardBehindCarFar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carFarbehind ++ ; "];
carCloseBehind -> behindFree [ label = "(3) rlevent\\EchoServer . isFreeBehind ( ) \\EchoServer . rewardBehindFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_behindFree ++ ; "];
carCloseBehind -> carCloseBehind [ label = "(4) rlevent\\EchoServer . isCarDetectedNearbyBehind ( ) \\EchoServer . rewardBehindCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carCloseBehind ++ ; "];
carCloseBehind -> carBehind [ label = "(5) rlevent\\EchoServer . isCarDetectedBehind ( ) \\EchoServer . rewardBehindCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carBehind ++ ; "];
carCloseBehind -> default [ label = "(6) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
behindFree -> start [ label = "(1) reset\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
behindFree -> carCloseBehind [ label = "(2) rlevent\\EchoServer . isCarDetectedNearbyBehind ( ) \\EchoServer . rewardBehindCarClose ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carCloseBehind ++ ; "];
behindFree -> carBehind [ label = "(3) rlevent\\EchoServer . isCarDetectedBehind ( ) \\EchoServer . rewardBehindCar ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carBehind ++ ; "];
behindFree -> behindFree [ label = "(4) rlevent\\EchoServer . isFreeBehind ( ) \\EchoServer . rewardBehindFree ( ) ; EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_behindFree ++ ; "];
behindFree -> carFarbehind [ label = "(5) rlevent\\\\EchoServer . propertyChecked ( ) ; EchoServer . c_OpponentsBehind_carFarbehind ++ ; "];
behindFree -> default [ label = "(6) rlevent\\\\EchoServer . tot_reward = 0 ; EchoServer . resetAgent ( ) ; "];
}