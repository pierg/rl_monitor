digraph _logic_trackPos {
rankdir=LR;
node [shape = circle]; centerRoad limitRoad start;
node [shape = octagon]; rightOffRoad leftOffRoad damage stuck default;
node [shape = point]; _s_s;
_s_s -> start;
damage -> start [ label = "(1) reset\\\\EchoServer . reward = 0 ; EchoServer . propertyChecked ( ) ; "];
damage -> stuck [ label = "(2) rlevent\\EchoServer . isStuck ( ) \\EchoServer . setRewardStuck ( ) ; EchoServer . propertyChecked ( ) ; "];
damage -> centerRoad [ label = "(3) rlevent\\EchoServer . isCenterRoad ( ) \\EchoServer . setRewardCenterRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
damage -> leftOffRoad [ label = "(4) rlevent\\EchoServer . isLeftOffRoad ( ) \\EchoServer . setRewardLeftOffRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
damage -> rightOffRoad [ label = "(5) rlevent\\EchoServer . isRightOffRoad ( ) \\EchoServer . setRewardRightOffRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
damage -> limitRoad [ label = "(6) rlevent\\EchoServer . isLimitRoad ( ) \\EchoServer . setRewardLimitRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
damage -> default [ label = "(7) rlevent\\\\EchoServer . reward = 0 ; EchoServer . resetAgent ( ) ; "];
default -> start [ label = "(1) reset\\\\EchoServer . reward = 0 ; EchoServer . propertyChecked ( ) ; "];
centerRoad -> start [ label = "(1) reset\\\\EchoServer . reward = 0 ; EchoServer . propertyChecked ( ) ; "];
centerRoad -> damage [ label = "(2) rlevent\\EchoServer . isDamage ( ) \\EchoServer . setRewardDamage ( ) ; EchoServer . propertyChecked ( ) ; "];
centerRoad -> centerRoad [ label = "(3) rlevent\\EchoServer . isCenterRoad ( ) \\EchoServer . setRewardCenterRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
centerRoad -> limitRoad [ label = "(4) rlevent\\EchoServer . isLimitRoad ( ) \\EchoServer . setRewardLimitRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
centerRoad -> default [ label = "(5) rlevent\\\\EchoServer . reward = 0 ; EchoServer . resetAgent ( ) ; "];
stuck -> start [ label = "(1) reset\\\\EchoServer . reward = 0 ; EchoServer . propertyChecked ( ) ; "];
stuck -> stuck [ label = "(2) rlevent\\EchoServer . isStuck ( ) \\EchoServer . setRewardStuck ( ) ; EchoServer . propertyChecked ( ) ; "];
stuck -> leftOffRoad [ label = "(3) rlevent\\EchoServer . isLeftOffRoad ( ) \\EchoServer . setRewardFromStuckToLeftOffRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
stuck -> rightOffRoad [ label = "(4) rlevent\\EchoServer . isRightOffRoad ( ) \\EchoServer . setRewardFromStuckToRightOffRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
stuck -> default [ label = "(5) rlevent\\\\EchoServer . reward = 0 ; EchoServer . resetAgent ( ) ; "];
start -> centerRoad [ label = "(1) rlevent\\\\EchoServer . setRewardCenterRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
start -> start [ label = "(2) reset\\\\EchoServer . reward = 0 ; EchoServer . propertyChecked ( ) ; "];
start -> default [ label = "(3) rlevent\\\\EchoServer . reward = 0 ; EchoServer . resetAgent ( ) ; "];
leftOffRoad -> start [ label = "(1) reset\\\\EchoServer . reward = 0 ; EchoServer . propertyChecked ( ) ; "];
leftOffRoad -> stuck [ label = "(2) rlevent\\EchoServer . isStuck ( ) \\EchoServer . setRewardStuck ( ) ; EchoServer . propertyChecked ( ) ; "];
leftOffRoad -> damage [ label = "(3) rlevent\\EchoServer . isDamage ( ) \\EchoServer . setRewardDamage ( ) ; EchoServer . propertyChecked ( ) ; "];
leftOffRoad -> limitRoad [ label = "(4) rlevent\\EchoServer . isLimitRoad ( ) \\EchoServer . setRewardOffRoadToLimitRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
leftOffRoad -> leftOffRoad [ label = "(5) rlevent\\EchoServer . isLeftOffRoad ( ) \\EchoServer . setRewardLeftOffRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
leftOffRoad -> default [ label = "(6) rlevent\\\\EchoServer . reward = 0 ; EchoServer . resetAgent ( ) ; "];
rightOffRoad -> start [ label = "(1) reset\\\\EchoServer . reward = 0 ; EchoServer . propertyChecked ( ) ; "];
rightOffRoad -> stuck [ label = "(2) rlevent\\EchoServer . isStuck ( ) \\EchoServer . setRewardStuck ( ) ; EchoServer . propertyChecked ( ) ; "];
rightOffRoad -> damage [ label = "(3) rlevent\\EchoServer . isDamage ( ) \\EchoServer . setRewardDamage ( ) ; EchoServer . propertyChecked ( ) ; "];
rightOffRoad -> limitRoad [ label = "(4) rlevent\\EchoServer . isLimitRoad ( ) \\EchoServer . setRewardOffRoadToLimitRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
rightOffRoad -> rightOffRoad [ label = "(5) rlevent\\EchoServer . isRightOffRoad ( ) \\EchoServer . setRewardRightOffRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
rightOffRoad -> default [ label = "(6) rlevent\\\\EchoServer . reward = 0 ; EchoServer . resetAgent ( ) ; "];
limitRoad -> start [ label = "(1) reset\\\\EchoServer . reward = 0 ; EchoServer . propertyChecked ( ) ; "];
limitRoad -> damage [ label = "(2) rlevent\\EchoServer . isDamage ( ) \\EchoServer . setRewardDamage ( ) ; EchoServer . propertyChecked ( ) ; "];
limitRoad -> centerRoad [ label = "(3) rlevent\\EchoServer . isCenterRoad ( ) \\EchoServer . setRewardLimitRoadToCenterRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
limitRoad -> limitRoad [ label = "(4) rlevent\\EchoServer . isLimitRoad ( ) \\EchoServer . setRewardLimitRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
limitRoad -> rightOffRoad [ label = "(5) rlevent\\EchoServer . isRightOffRoad ( ) \\EchoServer . setRewardRightOffRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
limitRoad -> leftOffRoad [ label = "(6) rlevent\\EchoServer . isLeftOffRoad ( ) \\EchoServer . setRewardLeftOffRoad ( ) ; EchoServer . propertyChecked ( ) ; "];
limitRoad -> default [ label = "(7) rlevent\\\\EchoServer . reward = 0 ; EchoServer . resetAgent ( ) ; "];
}