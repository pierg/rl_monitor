Imports
{
	import SocketServerPackage.EchoServer;
}

Global{

	Events{
		rlevent(obs, preobs) = {EchoServer.rlevent()}
		reset() = {EchoServer.reset()}
	}

	Property reward{

		States{
			Bad{rightOffRoad leftOffRoad damage stucked}
			Normal{centerRoad limitRoad}
			Starting{start}
		}

		Transitions{
			start->centerRoad[rlevent\\EchoServer.setRewardCenterRoad();EchoServer.response();]

			start->start[reset()\\EchoServer.reward = 0;EchoServer.response();]
			centerRoad->start[reset()\\EchoServer.reward = 0;EchoServer.response();]
			leftOffRoad->start[reset()\\EchoServer.reward = 0;EchoServer.response();]
			rightOffRoad->start[reset()\\EchoServer.reward = 0;EchoServer.response();]
			limitRoad->start[reset()\\EchoServer.reward = 0;EchoServer.response();]
			damage->start[reset()\\EchoServer.reward = 0;EchoServer.response();]
			stucked->start[reset()\\EchoServer.reward = 0;EchoServer.response();]

			centerRoad->damage[rlevent\EchoServer.isDamage()\EchoServer.setRewardDamage();EchoServer.response();]

			centerRoad->centerRoad[rlevent\EchoServer.isCenterRoad()\EchoServer.setRewardCenterRoad();EchoServer.response();]

			centerRoad->limitRoad[rlevent\EchoServer.isLimitRoad()\EchoServer.setRewardLimitRoad();EchoServer.response();]

			rightOffRoad->damage[rlevent\EchoServer.isDamage()\EchoServer.setRewardDamage();EchoServer.response();]

			rightOffRoad->limitRoad[rlevent\EchoServer.isLimitRoad()\EchoServer.setRewardOffRoadToLimitRoad();EchoServer.response();]

			rightOffRoad->rightOffRoad[rlevent\EchoServer.isRightOffRoad()\EchoServer.setRewardRightOffRoad();EchoServer.response();]


			leftOffRoad->damage[rlevent\EchoServer.isDamage()\EchoServer.setRewardDamage();EchoServer.response();]

			leftOffRoad->limitRoad[rlevent\EchoServer.isLimitRoad()\EchoServer.setRewardOffRoadToLimitRoad();EchoServer.response();]

			leftOffRoad->leftOffRoad[rlevent\EchoServer.isLeftOffRoad()\EchoServer.setRewardLeftOffRoad();EchoServer.response();]


			limitRoad->damage[rlevent\EchoServer.isDamage()\EchoServer.setRewardDamage();EchoServer.response();]

			limitRoad->centerRoad[rlevent\EchoServer.isCenterRoad()\EchoServer.setRewardLimitRoadToCenterRoad();EchoServer.response();]

			limitRoad->limitRoad[rlevent\EchoServer.isLimitRoad()\EchoServer.setRewardLimitRoad();EchoServer.response();]

			limitRoad->rightOffRoad[rlevent\EchoServer.isRightOffRoad()\EchoServer.setRewardRightOffRoad();EchoServer.response();]

			limitRoad->leftOffRoad[rlevent\EchoServer.isLeftOffRoad()\EchoServer.setRewardLeftOffRoad();EchoServer.response();]


			damage->stucked[rlevent\EchoServer.isStucked()\EchoServer.setRewardStucked();EchoServer.response();]

			damage->centerRoad[rlevent\EchoServer.isCenterRoad()\EchoServer.setRewardCenterRoad();EchoServer.response();]

			damage->leftOffRoad[rlevent\EchoServer.isLeftOffRoad()\EchoServer.setRewardLeftOffRoad();EchoServer.response();]

			damage->rightOffRoad[rlevent\EchoServer.isRightOffRoad()\EchoServer.setRewardRightOffRoad();EchoServer.response();]

			damage->limitRoad[rlevent\EchoServer.isLimitRoad()\EchoServer.setRewardLimitRoad();EchoServer.response();]


			stucked->stucked[rlevent\EchoServer.isStucked()\EchoServer.setRewardStucked();EchoServer.response();]

			stucked->leftOffRoad[rlevent\EchoServer.isLeftOffRoad()\EchoServer.setRewardFromStuckedToLeftOffRoad();EchoServer.response();]

			stucked->rightOffRoad[rlevent\EchoServer.isRightOffRoad()\EchoServer.setRewardFromStuckedToRightOffRoad();EchoServer.response();]
		}

	}

}
