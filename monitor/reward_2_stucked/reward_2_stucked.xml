<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>
// Set the goals to achieve
int goalSpeed = 90;       // Kmh
int goalTrackPos = 0;     // middle of the lane

// Reward returned
double reward;



</declaration>
	<template>
		<name x="5" y="5">VehicleInfo</name>
		<declaration>// Internal parameters
int fastSpeedPenalityIndex = 2;
int slowSpeedPenalityIndex = 1;
int factor = 10;         // multiplication factor for the reward function
int counter = 0;


// Variables that we get from the simulator
double trackPos;     // position of the vehicle with respect to the position of the track (0 is middle)
double speedX;            // speed of the vehicle on its X axis
double damage;        //
double lastDamage;
double angle;


// Return a positive value propotional to the error of the speed from the Goal, penalizing if it's too fast
double errorSpeed()
{
    if (speedX &gt;= goalSpeed)
    {
        return (speedX - goalSpeed)*fastSpeedPenalityIndex;
    }
    else
    {
        return (goalSpeed - speedX)*slowSpeedPenalityIndex;
    }

}

// Return a positive value propostional to the error fo the trackPos from the Goal
double errorTrackPos()
{
    if (trackPos &gt;= goalTrackPos)
    {
        return (trackPos - goalTrackPos);
    }
    else
    {
        return (goalTrackPos - trackPos);
    }
}


// Return a positive value propotional to the errors from the Goals
double eGoals()
{
    return factor*(errorSpeed() + errorTrackPos());
}


// Guard functions
bool isCenter()
{
    return (-5 &lt; trackPos &lt; 5);
}

bool isLimitRoad()
{
    return (-10 &lt; trackPos &lt; -5 || 5 &lt; trackPos &lt; 10);
}

bool isDamage()
{
    return (damage &gt; lastDamage);
}

bool isRightOffRoad()
{
    return (trackPos &lt;= -10);
}

bool isLeftOffRoad()
{
    return (trackPos &gt;= 10);
}

bool isStucked()
{
    return (trackPos &gt;= 10 || trackPos &lt;=10) &amp;&amp; speedX &lt; 10;
}

// Update functions

void rewardLimitRoad(){
    reward = 20 - eGoals();
}

void rewardLeftOffRoad(){
    reward = -20 + 10*angle - eGoals();
}

void rewardRightOffRoad(){
    reward = -20 - 10*angle - eGoals();
}

void rewardDamage(){
    reward = -40 - eGoals();
}

void rewardCenter(){
    reward = 50 - eGoals();
}

void rewardFromStuckedToLeftOffRoad()
{
    counter = 0;
    reward = -20 + 10*angle - eGoals();
}

void rewardFromStuckedToRightOffRoad()
{
    counter = 0;
    reward = -20 - 10*angle - eGoals();
}

void rewardStucked()
{
    counter += 10;
    reward = -20 - 10*angle - eGoals();
}</declaration>
		<location id="id0" x="153" y="-314">
			<name x="85" y="-339">stucked</name>
		</location>
		<location id="id1" x="153" y="-459">
			<name x="119" y="-442">damaged</name>
		</location>
		<location id="id2" x="-289" y="-773">
			<name x="-323" y="-807">leftOffRoad</name>
		</location>
		<location id="id3" x="153" y="-773">
			<name x="119" y="-807">limitRoad</name>
		</location>
		<location id="id4" x="153" y="-977">
			<name x="51" y="-1003">centerRoad</name>
		</location>
		<location id="id5" x="153" y="-1045">
			<name x="102" y="-1054">start</name>
		</location>
		<location id="id6" x="637" y="-765">
			<name x="613" y="-797">rightOffRoad</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-272" y="-348">isLeftOffRoad()</label>
			<label kind="assignment" x="-272" y="-331">rewardFromStuckedToLeftOffRoad()</label>
			<nail x="-289" y="-314"/>
			<nail x="-289" y="-433"/>
			<nail x="-272" y="-433"/>
			<nail x="-272" y="-467"/>
			<nail x="-289" y="-467"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="guard" x="374" y="-348">isRightOffRoad()</label>
			<label kind="assignment" x="374" y="-331">rewardFromStuckedToRightOffRoad()</label>
			<nail x="637" y="-314"/>
			<nail x="637" y="-433"/>
			<nail x="620" y="-433"/>
			<nail x="620" y="-467"/>
			<nail x="637" y="-467"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="110" y="-237">isStucked()</label>
			<label kind="assignment" x="110" y="-220">rewardStucked()</label>
			<nail x="136" y="-246"/>
			<nail x="170" y="-246"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="161" y="-416">isStucked()</label>
			<label kind="assignment" x="161" y="-399">rewardStucked()</label>
			<nail x="153" y="-408"/>
			<nail x="153" y="-365"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id1"/>
			<label kind="guard" x="527" y="-654">isDamage()</label>
			<label kind="assignment" x="493" y="-637">rewardDamage()</label>
			<nail x="612" y="-739"/>
			<nail x="612" y="-476"/>
			<nail x="204" y="-476"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="guard" x="306" y="-765">isLimitRoad()</label>
			<label kind="assignment" x="399" y="-765">rewardLimitRoad()</label>
			<nail x="569" y="-765"/>
			<nail x="204" y="-765"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="guard" x="280" y="-799">isRightOffRoad()</label>
			<label kind="assignment" x="399" y="-799">rewardRightOffRoad()</label>
			<nail x="195" y="-782"/>
			<nail x="586" y="-782"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="guard" x="671" y="-680">isRightOffRoad()</label>
			<label kind="assignment" x="671" y="-663">rewardRightOffRoad()</label>
			<nail x="663" y="-459"/>
			<nail x="663" y="-739"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-408" y="-654">isLeftOffRoad()</label>
			<label kind="assignment" x="-442" y="-637">rewardLeftOffRoad()</label>
			<nail x="76" y="-459"/>
			<nail x="-314" y="-459"/>
			<nail x="-314" y="-739"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="161" y="-620">isLimitRoad()</label>
			<label kind="assignment" x="161" y="-603">rewardLimitRoad()</label>
			<nail x="153" y="-620"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="544" y="-994">isCenter()</label>
			<label kind="assignment" x="620" y="-994">rewardCenter()</label>
			<nail x="195" y="-442"/>
			<nail x="799" y="-442"/>
			<nail x="799" y="-977"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-178" y="-493">isDamage()</label>
			<label kind="assignment" x="-93" y="-493">rewardDamage()</label>
			<nail x="-263" y="-739"/>
			<nail x="-263" y="-476"/>
			<nail x="93" y="-476"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-8" y="-688">isDamage()</label>
			<label kind="assignment" x="-42" y="-671">rewardDamage()</label>
			<nail x="76" y="-731"/>
			<nail x="76" y="-518"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-178" y="-433">isDamage()</label>
			<label kind="assignment" x="-93" y="-433">rewardDamage()</label>
			<nail x="-416" y="-977"/>
			<nail x="-416" y="-442"/>
			<nail x="102" y="-442"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-773">isLeftOffRoad()</label>
			<label kind="assignment" x="-484" y="-756">rewardLeftOffRoad()</label>
			<nail x="-348" y="-731"/>
			<nail x="-348" y="-773"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-178" y="-799">isLimitRoad()</label>
			<label kind="assignment" x="-76" y="-799">rewardLimitRoad()</label>
			<nail x="-246" y="-782"/>
			<nail x="102" y="-782"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-187" y="-765">isLeftOffRoad()</label>
			<label kind="assignment" x="-76" y="-765">rewardLeftOffRoad()</label>
			<nail x="110" y="-765"/>
			<nail x="-246" y="-765"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="187" y="-714">isLimitRoad()</label>
			<label kind="assignment" x="187" y="-697">rewardLimitRoad()</label>
			<nail x="187" y="-714"/>
			<nail x="212" y="-722"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="238" y="-943">isCenter()</label>
			<label kind="assignment" x="238" y="-926">rewardCenter()</label>
			<nail x="229" y="-824"/>
			<nail x="229" y="-952"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="119" y="-909">isCenter()</label>
			<label kind="assignment" x="102" y="-892">rewardCenter()</label>
			<nail x="137" y="-913"/>
			<nail x="169" y="-913"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-25" y="-943">isLimitRoad()</label>
			<label kind="assignment" x="-59" y="-926">rewardLimitRoad()</label>
			<nail x="68" y="-952"/>
			<nail x="68" y="-824"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="assignment" x="153" y="-1011">rewardCenter()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="705" y="-765">isRightOffRoad()</label>
			<label kind="assignment" x="705" y="-748">rewardRightOffRoad()</label>
			<nail x="697" y="-731"/>
			<nail x="697" y="-765"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = VehicleInfo();

// List one or more processes to be composed into a system.
system Process;</system>
	<queries>
		<query>
			<formula>A[](Process.rightOffRoad imply reward &lt;= -2)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
