<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>
// Set the goals to achieve
int goalSpeed = 90;       // Kmh
int goalTrackPos = 0;     // middle of the lane

// Reward returned
double reward;



</declaration>
	<template>
		<name x="5" y="5">TraclPos</name>
		<declaration>// Internal parameters
int fastSpeedPenalityIndex = 2;
int slowSpeedPenalityIndex = 1;
int counter = 0;


// Variables that we get from the simulator
double trackPos;     // position of the vehicle with respect to the position of the track (0 is middle)
double speedX;            // speed of the vehicle on its X axis
double damage;        //
double lastDamage;
double angle;


// Return a positive value propotional to the error of the speed from the Goal, penalizing if it's too fast
double errorSpeed()
{
    if (speedX &gt;= goalSpeed)
    {
        return (speedX - goalSpeed)*fastSpeedPenalityIndex;
    }
    else
    {
        return (goalSpeed - speedX)*slowSpeedPenalityIndex;
    }

}

// Return a positive value propostional to the error fo the trackPos from the Goal
double errorTrackPos()
{
    if (trackPos &gt;= goalTrackPos)
    {
        return (trackPos - goalTrackPos);
    }
    else
    {
        return (goalTrackPos - trackPos);
    }
}


// Return a positive value propotional to the errors from the Goals
double eGoals()
{
    return factor*(errorSpeed() + errorTrackPos());
}


// Guard functions
bool isCenter()
{
    return (-5 &lt; trackPos &lt; 5);
}

bool isLimitRoad()
{
    return (-10 &lt; trackPos &lt; -5 || 5 &lt; trackPos &lt; 10);
}

bool isDamage()
{
    return (damage &gt; lastDamage);
}

bool isRightOffRoad()
{
    return (trackPos &lt;= -10);
}

bool isLeftOffRoad()
{
    return (trackPos &gt;= 10);
}

bool isStuck()
{
    return (trackPos &gt;= 10 || trackPos &lt;=10) &amp;&amp; speedX &lt; 10;
}

// Update functions

void rewardLimitRoad(){
    reward = 20 - eGoals();
}

void rewardLeftOffRoad(){
    reward = -20 + 10*angle - eGoals();
}

void rewardRightOffRoad(){
    reward = -20 - 10*angle - eGoals();
}

void rewardDamage(){
    reward = -40 - eGoals();
}

void rewardCenter(){
    reward = 50 - eGoals();
}

void rewardFromStuckedToLeftOffRoad()
{
    counter = 0;
    reward = -20 + 10*angle - eGoals();
}

void rewardFromStuckedToRightOffRoad()
{
    counter = 0;
    reward = -20 - 10*angle - eGoals();
}

void rewardStuck()
{
    counter += 10;
    reward = -20 - 10*angle - eGoals();
}</declaration>
		<location id="id0" x="153" y="-314">
			<name x="110" y="-348">stuck</name>
		</location>
		<location id="id1" x="153" y="-459">
			<name x="161" y="-493">damaged</name>
		</location>
		<location id="id2" x="-289" y="-773">
			<name x="-323" y="-807">leftOffRoad</name>
		</location>
		<location id="id3" x="153" y="-773">
			<name x="127" y="-816">limitRoad</name>
		</location>
		<location id="id4" x="153" y="-977">
			<name x="51" y="-1003">centerRoad</name>
		</location>
		<location id="id5" x="153" y="-1045">
			<name x="102" y="-1054">start</name>
		</location>
		<location id="id6" x="637" y="-765">
			<name x="613" y="-797">rightOffRoad</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id6"/>
			<target ref="id0"/>
			<label kind="guard" x="527" y="-357">isStuck()</label>
			<label kind="assignment" x="527" y="-340">rewardStuck()</label>
			<nail x="629" y="-731"/>
			<nail x="629" y="-467"/>
			<nail x="612" y="-467"/>
			<nail x="612" y="-433"/>
			<nail x="629" y="-433"/>
			<nail x="629" y="-323"/>
			<nail x="195" y="-323"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-272" y="-357">isStuck()</label>
			<label kind="assignment" x="-272" y="-340">rewardStuck()</label>
			<nail x="-280" y="-740"/>
			<nail x="-280" y="-467"/>
			<nail x="-263" y="-467"/>
			<nail x="-263" y="-433"/>
			<nail x="-280" y="-433"/>
			<nail x="-280" y="-323"/>
			<nail x="110" y="-323"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-297" y="-297">isLeftOffRoad()</label>
			<label kind="assignment" x="-297" y="-280">rewardFromStuckedToLeftOffRoad()</label>
			<nail x="110" y="-306"/>
			<nail x="-297" y="-306"/>
			<nail x="-297" y="-433"/>
			<nail x="-280" y="-433"/>
			<nail x="-280" y="-467"/>
			<nail x="-297" y="-467"/>
			<nail x="-297" y="-731"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="guard" x="391" y="-306">isRightOffRoad()</label>
			<label kind="assignment" x="391" y="-289">rewardFromStuckedToRightOffRoad()</label>
			<nail x="195" y="-306"/>
			<nail x="646" y="-306"/>
			<nail x="646" y="-433"/>
			<nail x="629" y="-433"/>
			<nail x="629" y="-467"/>
			<nail x="646" y="-467"/>
			<nail x="646" y="-739"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="110" y="-237">isStucked()</label>
			<label kind="assignment" x="110" y="-220">rewardStucked()</label>
			<nail x="136" y="-246"/>
			<nail x="170" y="-246"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="161" y="-416">isStuck()</label>
			<label kind="assignment" x="161" y="-399">rewardStuck()</label>
			<nail x="153" y="-408"/>
			<nail x="153" y="-365"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id1"/>
			<label kind="guard" x="323" y="-493">isDamage()</label>
			<label kind="assignment" x="408" y="-493">rewardDamage()</label>
			<nail x="612" y="-739"/>
			<nail x="612" y="-476"/>
			<nail x="204" y="-476"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="guard" x="306" y="-765">isLimitRoad()</label>
			<label kind="assignment" x="399" y="-765">rewardLimitRoad()</label>
			<nail x="569" y="-765"/>
			<nail x="204" y="-765"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="guard" x="280" y="-799">isRightOffRoad()</label>
			<label kind="assignment" x="399" y="-799">rewardRightOffRoad()</label>
			<nail x="195" y="-782"/>
			<nail x="586" y="-782"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="guard" x="671" y="-680">isRightOffRoad()</label>
			<label kind="assignment" x="671" y="-663">rewardRightOffRoad()</label>
			<nail x="663" y="-459"/>
			<nail x="663" y="-739"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-408" y="-654">isLeftOffRoad()</label>
			<label kind="assignment" x="-442" y="-637">rewardLeftOffRoad()</label>
			<nail x="76" y="-459"/>
			<nail x="-314" y="-459"/>
			<nail x="-314" y="-739"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="161" y="-620">isLimitRoad()</label>
			<label kind="assignment" x="161" y="-603">rewardLimitRoad()</label>
			<nail x="153" y="-620"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="544" y="-994">isCenter()</label>
			<label kind="assignment" x="620" y="-994">rewardCenter()</label>
			<nail x="195" y="-442"/>
			<nail x="799" y="-442"/>
			<nail x="799" y="-977"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-178" y="-493">isDamage()</label>
			<label kind="assignment" x="-93" y="-493">rewardDamage()</label>
			<nail x="-263" y="-739"/>
			<nail x="-263" y="-476"/>
			<nail x="93" y="-476"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="8" y="-697">isDamage()</label>
			<label kind="assignment" x="-26" y="-680">rewardDamage()</label>
			<nail x="93" y="-739"/>
			<nail x="93" y="-501"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-178" y="-433">isDamage()</label>
			<label kind="assignment" x="-93" y="-433">rewardDamage()</label>
			<nail x="-416" y="-977"/>
			<nail x="-416" y="-442"/>
			<nail x="102" y="-442"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-773">isLeftOffRoad()</label>
			<label kind="assignment" x="-484" y="-756">rewardLeftOffRoad()</label>
			<nail x="-348" y="-731"/>
			<nail x="-348" y="-773"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-178" y="-799">isLimitRoad()</label>
			<label kind="assignment" x="-76" y="-799">rewardLimitRoad()</label>
			<nail x="-246" y="-782"/>
			<nail x="102" y="-782"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-187" y="-765">isLeftOffRoad()</label>
			<label kind="assignment" x="-76" y="-765">rewardLeftOffRoad()</label>
			<nail x="110" y="-765"/>
			<nail x="-246" y="-765"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="187" y="-714">isLimitRoad()</label>
			<label kind="assignment" x="187" y="-697">rewardLimitRoad()</label>
			<nail x="187" y="-714"/>
			<nail x="212" y="-722"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="221" y="-943">isCenter()</label>
			<label kind="assignment" x="221" y="-926">rewardCenter()</label>
			<nail x="212" y="-799"/>
			<nail x="212" y="-952"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="119" y="-909">isCenter()</label>
			<label kind="assignment" x="102" y="-892">rewardCenter()</label>
			<nail x="137" y="-913"/>
			<nail x="169" y="-913"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="0" y="-943">isLimitRoad()</label>
			<label kind="assignment" x="-34" y="-926">rewardLimitRoad()</label>
			<nail x="93" y="-952"/>
			<nail x="93" y="-799"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="assignment" x="161" y="-1020">rewardCenter()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="705" y="-765">isRightOffRoad()</label>
			<label kind="assignment" x="705" y="-748">rewardRightOffRoad()</label>
			<nail x="697" y="-731"/>
			<nail x="697" y="-765"/>
		</transition>
	</template>
	<template>
		<name>Speed</name>
		<declaration>double angle;

// Variables that we get from the simulator
double trackPos;     // position of the vehicle with respect to the position of the track (0 is middle)
double speedX;            // speed of the vehicle on its X axis
double damage;        //
double lastDamage;
double angle;
double track[19];


bool isRightOffRoad()
{
    return (trackPos &lt;= -10);
}

bool isLeftOffRoad()
{
    return (trackPos &gt;= 10);
}

bool isTurning(){
    return (track[10] &lt; 100) &amp;&amp; angle &lt; 0.2 &amp;&amp; angle &gt; -0.2 &amp;&amp; !isLeftOffRoad() &amp;&amp; !isRightOffRoad();
}</declaration>
		<location id="id7" x="-127" y="-365">
			<name x="-161" y="-348">Turning</name>
		</location>
		<location id="id8" x="-127" y="-595">
			<name x="-110" y="-603">GoingStraight</name>
		</location>
		<location id="id9" x="-127" y="-748">
			<name x="-144" y="-799">start</name>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="guard" x="-76" y="-374">isTurning()</label>
			<nail x="-85" y="-382"/>
			<nail x="-85" y="-348"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<nail x="-110" y="-391"/>
			<nail x="-110" y="-561"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-221" y="-501">isTurning()</label>
			<nail x="-144" y="-561"/>
			<nail x="-144" y="-391"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = VehicleInfo();

// List one or more processes to be composed into a system.
system Process;</system>
	<queries>
		<query>
			<formula>A[](Process.rightOffRoad imply reward &lt;= -2)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
