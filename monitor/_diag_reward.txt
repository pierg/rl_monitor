digraph _logic_reward {
rankdir=LR;
node [shape = circle]; forward limitRoad start;
node [shape = octagon]; offRoad damage;
node [shape = point]; _s_s;
_s_s -> start;
damage -> forward [ label = "(1) rlevent\\EchoServer . isForward ( ) \\EchoServer . setRewardOffRoadToForward ( ) ; EchoServer . response ( ) ; counter ++ ; "];
damage -> offRoad [ label = "(2) rlevent\\EchoServer . isOffRoad ( ) \\EchoServer . setRewardOffRoad ( ) ; EchoServer . response ( ) ; counter ++ ; "];
damage -> limitRoad [ label = "(3) rlevent\\EchoServer . isLimitRoad ( ) \\EchoServer . setRewardOffRoad ( ) ; EchoServer . response ( ) ; counter ++ ; "];
forward -> damage [ label = "(1) rlevent\\EchoServer . isDamage ( ) \\EchoServer . setRewardDamage ( ) ; EchoServer . response ( ) ; counter ++ ; "];
forward -> forward [ label = "(2) rlevent\\EchoServer . isForward ( ) \\EchoServer . setRewardForward ( ) ; EchoServer . response ( ) ; counter ++ ; "];
forward -> limitRoad [ label = "(3) rlevent\\EchoServer . isLimitRoad ( ) \\EchoServer . setRewardLimitRoad ( ) ; EchoServer . response ( ) ; counter ++ ; "];
forward -> offRoad [ label = "(4) rlevent\\EchoServer . isOffRoad ( ) \\EchoServer . setRewardForwardToOffRoad ( ) ; EchoServer . response ( ) ; counter ++ ; "];
start -> forward [ label = "(1) rlevent\\\\EchoServer . setReward ( ) ; EchoServer . response ( ) ; counter ++ ; "];
offRoad -> damage [ label = "(1) rlevent\\EchoServer . isDamage ( ) \\EchoServer . setRewardDamage ( ) ; EchoServer . response ( ) ; counter ++ ; "];
offRoad -> forward [ label = "(2) rlevent\\EchoServer . isForward ( ) \\EchoServer . setRewardOffRoadToForward ( ) ; EchoServer . response ( ) ; counter ++ ; "];
offRoad -> limitRoad [ label = "(3) rlevent\\EchoServer . isLimitRoad ( ) \\EchoServer . setRewardLimitRoad ( ) ; EchoServer . response ( ) ; counter ++ ; "];
offRoad -> offRoad [ label = "(4) rlevent\\EchoServer . isOffRoad ( ) \\EchoServer . setRewardOffRoad ( ) ; EchoServer . response ( ) ; counter ++ ; "];
limitRoad -> damage [ label = "(1) rlevent\\EchoServer . isDamage ( ) \\EchoServer . setRewardDamage ( ) ; EchoServer . response ( ) ; counter ++ ; "];
limitRoad -> forward [ label = "(2) rlevent\\EchoServer . isForward ( ) \\EchoServer . setRewardOffRoadToForward ( ) ; EchoServer . response ( ) ; counter ++ ; "];
limitRoad -> limitRoad [ label = "(3) rlevent\\EchoServer . isLimitRoad ( ) \\EchoServer . setRewardLimitRoad ( ) ; EchoServer . response ( ) ; counter ++ ; "];
limitRoad -> offRoad [ label = "(4) rlevent\\EchoServer . isOffRoad ( ) \\EchoServer . setRewardOffRoad ( ) ; EchoServer . response ( ) ; counter ++ ; "];
}