<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Precision factor: from double to int
const int F = 1;

// Set the goals to achieve
int goalSpeed = 90;       // Kmh
int goalTrackPos = 0;     // middle of the lane

// Reward returned
int reward;


// Distance between the car and the track axis. 
// The value is normalized w.r.t to the track width: 
// it is 0 when car is on the axis, -1 when the car is on the right edge of the track and +1 when it is on the left edge of the car. 
// Values greater than 1 or smaller than -1 mean that the car is outside of the track.
// We assume a limit between -5 and +5 (* FACTOR)
typedef int[-5, +5]      trackPos_T;
const int                trackPos_N = 10;
chan                     trackPos_C[trackPos_N];
int                      trackPos;



// Speed of the car along the longitudinal axis of the car.
int speedX;



</declaration>
	<template>
		<name x="5" y="5">TrackPos</name>
		<declaration>

// Internal parameters
int fastSpeedPenalityIndex = 2;
int slowSpeedPenalityIndex = 1;
int counter = 0;


// Guard functions
bool isCenter()
{
    if (-1*F &lt; trackPos &amp;&amp; trackPos &lt; 1*F)
    {
        return true;
    }
    else
    {    
        return false;
    }
}

bool isLimitRoad()
{   
    return false;
//    bool a = (-2*F &lt; trackPos &lt; -1*F);
  //  bool b = (1*F &lt; trackPos &lt; 2*F);
    //if (a == true) return true;
    //if (b == true) return true;
//    return false;
}

bool isRightOffRoad()
{
    return (trackPos &lt;= -2*F);
}

bool isLeftOffRoad()
{
    return (trackPos &gt;= 2*F);
}

// Update functions

void rewardLimitRoad(){
    reward = 0;
}

void rewardLeftOffRoad(){
    reward = -10;
}

void rewardRightOffRoad(){
    reward = -10;
}

void rewardCenter(){
    reward = +20;
}
</declaration>
		<location id="id0" x="-127" y="-850">
			<name x="-161" y="-884">leftOffRoad</name>
		</location>
		<location id="id1" x="153" y="-977">
			<name x="51" y="-1003">centerRoad</name>
		</location>
		<location id="id2" x="153" y="-1113">
			<name x="102" y="-1122">start</name>
		</location>
		<location id="id3" x="433" y="-850">
			<name x="409" y="-882">rightOffRoad</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-8" y="-858">isCenter()</label>
			<label kind="assignment" x="-8" y="-841">rewardCenter()</label>
			<nail x="34" y="-867"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="289" y="-850">isCenter()</label>
			<label kind="assignment" x="289" y="-833">rewardCenter()</label>
			<nail x="272" y="-858"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="340" y="-994">isRightOffRoad()</label>
			<label kind="assignment" x="340" y="-969">rewardRightOffRoad()</label>
			<nail x="365" y="-943"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-161" y="-986">isLeftOffRoad()</label>
			<label kind="assignment" x="-195" y="-969">rewardLeftOffRoad()</label>
			<nail x="-42" y="-969"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-288" y="-850">isLeftOffRoad()</label>
			<label kind="assignment" x="-322" y="-833">rewardLeftOffRoad()</label>
			<nail x="-186" y="-808"/>
			<nail x="-186" y="-850"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="119" y="-909">isCenter()</label>
			<label kind="assignment" x="102" y="-892">rewardCenter()</label>
			<nail x="137" y="-913"/>
			<nail x="169" y="-913"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="161" y="-1079">isCenter()</label>
			<label kind="assignment" x="161" y="-1062">rewardCenter()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="501" y="-850">isRightOffRoad()</label>
			<label kind="assignment" x="501" y="-833">rewardRightOffRoad()</label>
			<nail x="493" y="-816"/>
			<nail x="493" y="-850"/>
		</transition>
	</template>
	<template>
		<name>Sim_TrackPos</name>
		<declaration>// We assume a limit between -5 and +5 (* FACTOR)
typedef int[-500, +500] trackPosT;</declaration>
		<location id="id4" x="-246" y="-34">
			<name x="-399" y="-42">StartEnv</name>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="select" x="-280" y="-178">i : trackPos_T</label>
			<label kind="assignment" x="-280" y="-153">trackPos = i</label>
			<nail x="-314" y="-110"/>
			<nail x="-178" y="-110"/>
		</transition>
	</template>
	<template>
		<name>Sim_Speed</name>
		<declaration>
// We assume a limit between 0 and 100 ( *FACTOR)
typedef int[0, 10000] speedXT;

</declaration>
		<location id="id5" x="0" y="0">
		</location>
		<init ref="id5"/>
	</template>
	<template>
		<name>Speed</name>
		<declaration>clock t;

double angle;

</declaration>
		<location id="id6" x="-136" y="-365">
			<name x="-170" y="-348">Turning</name>
		</location>
		<location id="id7" x="-127" y="-595">
			<name x="-110" y="-603">GoingStraight</name>
		</location>
		<location id="id8" x="-127" y="-748">
			<name x="-144" y="-799">start</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<nail x="-110" y="-391"/>
			<nail x="-110" y="-561"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<nail x="-153" y="-561"/>
			<nail x="-153" y="-391"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
		</transition>
	</template>
	<system>
// List one or more processes to be composed into a system.
system TrackPos, Sim_TrackPos;</system>
	<queries>
		<query>
			<formula>A[](Process.rightOffRoad imply reward &lt;= -2)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
