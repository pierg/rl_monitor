<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>
// Set the goals to achieve
int goalSpeed = 50;       // Kmh
int goalTrackPos = 0;     // middle of the lane

// Reward returned
double reward;



</declaration>
	<template>
		<name x="5" y="5">VehicleInfo</name>
		<declaration>// Internal parameters
int fastSpeedPenalityIndex = 2;
int slowSpeedPenalityIndex = 1;
int factor = 10;         // multiplication factor for the reward function


// Variables that we get from the simulator
int[-10,10] trackPos;     // position of the vehicle with respect to the position of the track (0 is middle)
double speedX;            // speed of the vehicle on its X axis
int[0,100] damage;        //
int[0,100] lastDamage;
double angle;
typedef [-2,2] TrackPositions;


// Return a positive value propotional to the error of the speed from the Goal, penalizing if it's too fast
double errorSpeed()
{
    if (speedX &gt;= goalSpeed)
    {
        return (speedX - goalSpeed)*fastSpeedPenalityIndex;
    }
    else
    {
        return (goalSpeed - speedX)*slowSpeedPenalityIndex;
    }

}

// Return a positive value propostional to the error fo the trackPos from the Goal
double errorTrackPos()
{
    if (trackPos &gt;= goalTrackPos)
    {
        return (trackPos - goalTrackPos);
    }
    else
    {
        return (goalTrackPos - trackPos);
    }
}


// Return a positive value propotional to the errors from the Goals
double eGoals()
{
    return factor*(errorSpeed() + errorTrackPos());
}


// Guard functions
bool isCenter()
{
    return (-5 &lt; trackPos &lt; 5);
}

bool isLimitRoad()
{
    return (-10 &lt; trackPos &lt; -5 || 5 &lt; trackPos &lt; 10);
}

bool isDamage()
{
    return (damage &gt; lastDamage);
}

bool isRightOffRoad()
{
    return (trackPos &lt;= -10);
}

bool isLeftOffRoad()
{
    return (trackPos &gt;= 10);
}

</declaration>
		<location id="id0" x="-289" y="-773">
			<name x="-323" y="-807">leftOffRoad</name>
		</location>
		<location id="id1" x="153" y="-773">
			<name x="119" y="-807">limitRoad</name>
		</location>
		<location id="id2" x="153" y="-977">
			<name x="51" y="-1003">centerRoad</name>
		</location>
		<location id="id3" x="153" y="-1045">
			<name x="102" y="-1054">start</name>
		</location>
		<location id="id4" x="637" y="-765">
			<name x="613" y="-797">rightOffRoad</name>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="331" y="-773">isLimitRoad()</label>
			<label kind="assignment" x="331" y="-756">reward = 30 - eGoals()</label>
			<nail x="569" y="-756"/>
			<nail x="204" y="-756"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="314" y="-816">isRightOffRoad()</label>
			<label kind="assignment" x="314" y="-799">reward = -20 - 10*angle - eGoals()</label>
			<nail x="195" y="-782"/>
			<nail x="586" y="-782"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-459" y="-773">isLeftOffRoad()</label>
			<label kind="assignment" x="-603" y="-756">reward = -20 + 10*angle - eGoals()</label>
			<nail x="-348" y="-731"/>
			<nail x="-348" y="-773"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-178" y="-799">isLimitRoad()</label>
			<label kind="assignment" x="-76" y="-799">reward = 30 - eGoals()</label>
			<nail x="-246" y="-782"/>
			<nail x="102" y="-782"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-187" y="-765">isLeftOffRoad()</label>
			<label kind="assignment" x="-221" y="-748">reward = -20 + 10*angle - eGoals()</label>
			<nail x="110" y="-765"/>
			<nail x="-246" y="-765"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="110" y="-705">isLimitRoad()</label>
			<label kind="assignment" x="93" y="-688">reward = 20 - eGoals()</label>
			<nail x="119" y="-714"/>
			<nail x="187" y="-714"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="238" y="-943">isCenter()</label>
			<label kind="assignment" x="238" y="-926">reward = 60 -  eGoals()</label>
			<nail x="229" y="-824"/>
			<nail x="229" y="-952"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="119" y="-909">isCenter()</label>
			<label kind="assignment" x="73" y="-891">reward = 50 - eGoals()</label>
			<nail x="137" y="-913"/>
			<nail x="169" y="-913"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="select" x="-102" y="-960">move : int[-2,2]</label>
			<label kind="guard" x="-102" y="-943">isLimitRoad()</label>
			<label kind="assignment" x="-136" y="-926">reward = 20 - eGoals(),
trackPos = trackPos + move</label>
			<nail x="68" y="-952"/>
			<nail x="68" y="-824"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="705" y="-765">isRightOffRoad()</label>
			<label kind="assignment" x="705" y="-748">reward = -20 - 10*angle - eGoals()</label>
			<nail x="697" y="-731"/>
			<nail x="697" y="-765"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = VehicleInfo();

// List one or more processes to be composed into a system.
system Process;</system>
	<queries>
		<query>
			<formula>A[](Process.rightOffRoad imply reward &lt;= -2)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
