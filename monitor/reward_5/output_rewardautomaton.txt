[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>leftOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>leftOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>leftOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>leftOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>leftOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>leftOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>leftOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>leftOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>leftOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>leftOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>leftOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>leftOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> limitRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>limitRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> damaged
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>damaged
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightOffRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Stuck
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[TrackPos]AUTOMATON::> TrackPos() STATE::>rightOffRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[Speed]AUTOMATON::> Speed() STATE::>Stuck
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.reset() TO STATE::> start
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>start
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>start
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>start
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>start
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>start
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>start
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>start
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> GoingStraight
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>GoingStraight
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
[OpponentsRight]AUTOMATON::> OpponentsRight() STATE::>rightFree
[OpponentsRight]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> rightFree
[OpponentsBehind]AUTOMATON::> OpponentsBehind() STATE::>behindFree
[OpponentsBehind]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> behindFree
[OpponentsLeft]AUTOMATON::> OpponentsLeft() STATE::>leftFree
[OpponentsLeft]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> leftFree
[OpponentsAhead]AUTOMATON::> OpponentsAhead() STATE::>frontFree
[OpponentsAhead]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> frontFree
[TrackPos]AUTOMATON::> TrackPos() STATE::>centerRoad
[TrackPos]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> centerRoad
[Damage]AUTOMATON::> Damage() STATE::>normal
[Damage]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> normal
[Speed]AUTOMATON::> Speed() STATE::>Turning
[Speed]MOVED ON METHODCALL: void SocketServerPackage.EchoServer.rlevent() TO STATE::> Turning
