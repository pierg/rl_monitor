# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sandia_hand_msgs/RawPalmState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RawPalmState(genpy.Message):
  _md5sum = "4dac80ef5adde66fbf1e5067579f33bb"
  _type = "sandia_hand_msgs/RawPalmState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32     palm_time
int16[3]   palm_accel
int16[3]   palm_gyro
int16[3]   palm_mag
uint16[7]  palm_temps
uint16[32] palm_tactile
"""
  __slots__ = ['palm_time','palm_accel','palm_gyro','palm_mag','palm_temps','palm_tactile']
  _slot_types = ['uint32','int16[3]','int16[3]','int16[3]','uint16[7]','uint16[32]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       palm_time,palm_accel,palm_gyro,palm_mag,palm_temps,palm_tactile

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RawPalmState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.palm_time is None:
        self.palm_time = 0
      if self.palm_accel is None:
        self.palm_accel = [0,0,0]
      if self.palm_gyro is None:
        self.palm_gyro = [0,0,0]
      if self.palm_mag is None:
        self.palm_mag = [0,0,0]
      if self.palm_temps is None:
        self.palm_temps = [0,0,0,0,0,0,0]
      if self.palm_tactile is None:
        self.palm_tactile = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    else:
      self.palm_time = 0
      self.palm_accel = [0,0,0]
      self.palm_gyro = [0,0,0]
      self.palm_mag = [0,0,0]
      self.palm_temps = [0,0,0,0,0,0,0]
      self.palm_tactile = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_I.pack(self.palm_time))
      buff.write(_struct_3h.pack(*self.palm_accel))
      buff.write(_struct_3h.pack(*self.palm_gyro))
      buff.write(_struct_3h.pack(*self.palm_mag))
      buff.write(_struct_7H.pack(*self.palm_temps))
      buff.write(_struct_32H.pack(*self.palm_tactile))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.palm_time,) = _struct_I.unpack(str[start:end])
      start = end
      end += 6
      self.palm_accel = _struct_3h.unpack(str[start:end])
      start = end
      end += 6
      self.palm_gyro = _struct_3h.unpack(str[start:end])
      start = end
      end += 6
      self.palm_mag = _struct_3h.unpack(str[start:end])
      start = end
      end += 14
      self.palm_temps = _struct_7H.unpack(str[start:end])
      start = end
      end += 64
      self.palm_tactile = _struct_32H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_I.pack(self.palm_time))
      buff.write(self.palm_accel.tostring())
      buff.write(self.palm_gyro.tostring())
      buff.write(self.palm_mag.tostring())
      buff.write(self.palm_temps.tostring())
      buff.write(self.palm_tactile.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.palm_time,) = _struct_I.unpack(str[start:end])
      start = end
      end += 6
      self.palm_accel = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 6
      self.palm_gyro = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 6
      self.palm_mag = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 14
      self.palm_temps = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=7)
      start = end
      end += 64
      self.palm_tactile = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=32)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_32H = struct.Struct("<32H")
_struct_3h = struct.Struct("<3h")
_struct_7H = struct.Struct("<7H")
