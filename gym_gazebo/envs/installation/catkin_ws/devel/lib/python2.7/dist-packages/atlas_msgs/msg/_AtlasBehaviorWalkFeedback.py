# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from atlas_msgs/AtlasBehaviorWalkFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import atlas_msgs.msg

class AtlasBehaviorWalkFeedback(genpy.Message):
  _md5sum = "4bd389e051b01f8e9b15c23ca6b58e8b"
  _type = "atlas_msgs/AtlasBehaviorWalkFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# mirrored from AtlasControlTypes.h
float64 t_step_rem
uint32 current_step_index
uint32 next_step_index_needed
uint32 status_flags    # use AtlasBeahviorFeedback/status_flags
atlas_msgs/AtlasBehaviorStepData[4] step_queue_saturated # 4 is hardcoded in AtlasSimInterface library.

================================================================================
MSG: atlas_msgs/AtlasBehaviorStepData
# multi_step walking trajectory parameters
uint32 step_index              # Step index, matlab style, starting from 1,
                               # monotonically increasing during walking
                               #  resets to 1 if robot leaves walk behaviors
uint32 foot_index              # Foot_index can be LEFT_FOOT or RIGHT_FOOT
float64 duration               # Step duration, when in doubt, 0.63s is a
                               # good guess.
geometry_msgs/Pose pose        # Foot pose in Atlas world frame
float64 swing_height           # Step apex swing height measured form the
                               # midpoint between the feet.

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['t_step_rem','current_step_index','next_step_index_needed','status_flags','step_queue_saturated']
  _slot_types = ['float64','uint32','uint32','uint32','atlas_msgs/AtlasBehaviorStepData[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       t_step_rem,current_step_index,next_step_index_needed,status_flags,step_queue_saturated

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AtlasBehaviorWalkFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.t_step_rem is None:
        self.t_step_rem = 0.
      if self.current_step_index is None:
        self.current_step_index = 0
      if self.next_step_index_needed is None:
        self.next_step_index_needed = 0
      if self.status_flags is None:
        self.status_flags = 0
      if self.step_queue_saturated is None:
        self.step_queue_saturated = [atlas_msgs.msg.AtlasBehaviorStepData(),atlas_msgs.msg.AtlasBehaviorStepData(),atlas_msgs.msg.AtlasBehaviorStepData(),atlas_msgs.msg.AtlasBehaviorStepData()]
    else:
      self.t_step_rem = 0.
      self.current_step_index = 0
      self.next_step_index_needed = 0
      self.status_flags = 0
      self.step_queue_saturated = [atlas_msgs.msg.AtlasBehaviorStepData(),atlas_msgs.msg.AtlasBehaviorStepData(),atlas_msgs.msg.AtlasBehaviorStepData(),atlas_msgs.msg.AtlasBehaviorStepData()]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_d3I.pack(_x.t_step_rem, _x.current_step_index, _x.next_step_index_needed, _x.status_flags))
      for val1 in self.step_queue_saturated:
        _x = val1
        buff.write(_struct_2Id.pack(_x.step_index, _x.foot_index, _x.duration))
        _v1 = val1.pose
        _v2 = _v1.position
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.swing_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.step_queue_saturated is None:
        self.step_queue_saturated = None
      end = 0
      _x = self
      start = end
      end += 20
      (_x.t_step_rem, _x.current_step_index, _x.next_step_index_needed, _x.status_flags,) = _struct_d3I.unpack(str[start:end])
      self.step_queue_saturated = []
      for i in range(0, 4):
        val1 = atlas_msgs.msg.AtlasBehaviorStepData()
        _x = val1
        start = end
        end += 16
        (_x.step_index, _x.foot_index, _x.duration,) = _struct_2Id.unpack(str[start:end])
        _v4 = val1.pose
        _v5 = _v4.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v6 = _v4.orientation
        _x = _v6
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.swing_height,) = _struct_d.unpack(str[start:end])
        self.step_queue_saturated.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_d3I.pack(_x.t_step_rem, _x.current_step_index, _x.next_step_index_needed, _x.status_flags))
      for val1 in self.step_queue_saturated:
        _x = val1
        buff.write(_struct_2Id.pack(_x.step_index, _x.foot_index, _x.duration))
        _v7 = val1.pose
        _v8 = _v7.position
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = _v7.orientation
        _x = _v9
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.swing_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.step_queue_saturated is None:
        self.step_queue_saturated = None
      end = 0
      _x = self
      start = end
      end += 20
      (_x.t_step_rem, _x.current_step_index, _x.next_step_index_needed, _x.status_flags,) = _struct_d3I.unpack(str[start:end])
      self.step_queue_saturated = []
      for i in range(0, 4):
        val1 = atlas_msgs.msg.AtlasBehaviorStepData()
        _x = val1
        start = end
        end += 16
        (_x.step_index, _x.foot_index, _x.duration,) = _struct_2Id.unpack(str[start:end])
        _v10 = val1.pose
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.swing_height,) = _struct_d.unpack(str[start:end])
        self.step_queue_saturated.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
_struct_2Id = struct.Struct("<2Id")
_struct_3d = struct.Struct("<3d")
_struct_4d = struct.Struct("<4d")
_struct_d3I = struct.Struct("<d3I")
