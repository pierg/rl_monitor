# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from handle_msgs/HandleSensorsCalibrated.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import handle_msgs.msg
import std_msgs.msg

class HandleSensorsCalibrated(genpy.Message):
  _md5sum = "54133cdcf259bf3a4416674ef7b62161"
  _type = "handle_msgs/HandleSensorsCalibrated"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This is sensors of the HANDLE hand after calibration and data manipulation
# published from the package sensors, by the sensors_publisher

# not all the sensors were included, but only the one which were addressed at the moment

# Currently only used for time stamp.  
Header header

# The tactile array for each finger.  In units of kPa.
# [F1, F2, F3]
# Note there are 12 proximal and 10 distal sensors.
Finger[3] fingerTactile

# The tactile array for the palm.  In units of kPa.
float32[48] palmTactile

# The encoder on the F1 / F2 rotation.
# Approx. 768 ticks to rotate the fingers 90 degrees.
float32 fingerSpread

# The proximal joint angle. Angle in radians
# [F1, F2, F3]
float32[3] proximalJointAngle

# The finger distal joint flexture angle
# [F1, F2, F3]
# Note there are 4 readings on either side of the joint.
Finger[3] distalJointAngle


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: handle_msgs/Finger
# This finger definition is used for different sensors in the HandleSensors 
# message type.  

float32[] proximal
float32[] distal

"""
  __slots__ = ['header','fingerTactile','palmTactile','fingerSpread','proximalJointAngle','distalJointAngle']
  _slot_types = ['std_msgs/Header','handle_msgs/Finger[3]','float32[48]','float32','float32[3]','handle_msgs/Finger[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,fingerTactile,palmTactile,fingerSpread,proximalJointAngle,distalJointAngle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HandleSensorsCalibrated, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fingerTactile is None:
        self.fingerTactile = [handle_msgs.msg.Finger(),handle_msgs.msg.Finger(),handle_msgs.msg.Finger()]
      if self.palmTactile is None:
        self.palmTactile = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.fingerSpread is None:
        self.fingerSpread = 0.
      if self.proximalJointAngle is None:
        self.proximalJointAngle = [0.,0.,0.]
      if self.distalJointAngle is None:
        self.distalJointAngle = [handle_msgs.msg.Finger(),handle_msgs.msg.Finger(),handle_msgs.msg.Finger()]
    else:
      self.header = std_msgs.msg.Header()
      self.fingerTactile = [handle_msgs.msg.Finger(),handle_msgs.msg.Finger(),handle_msgs.msg.Finger()]
      self.palmTactile = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.fingerSpread = 0.
      self.proximalJointAngle = [0.,0.,0.]
      self.distalJointAngle = [handle_msgs.msg.Finger(),handle_msgs.msg.Finger(),handle_msgs.msg.Finger()]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      for val1 in self.fingerTactile:
        length = len(val1.proximal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.proximal))
        length = len(val1.distal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.distal))
      buff.write(_struct_48f.pack(*self.palmTactile))
      buff.write(_struct_f.pack(self.fingerSpread))
      buff.write(_struct_3f.pack(*self.proximalJointAngle))
      for val1 in self.distalJointAngle:
        length = len(val1.proximal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.proximal))
        length = len(val1.distal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.distal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fingerTactile is None:
        self.fingerTactile = None
      if self.distalJointAngle is None:
        self.distalJointAngle = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      self.fingerTactile = []
      for i in range(0, 3):
        val1 = handle_msgs.msg.Finger()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.proximal = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.distal = struct.unpack(pattern, str[start:end])
        self.fingerTactile.append(val1)
      start = end
      end += 192
      self.palmTactile = _struct_48f.unpack(str[start:end])
      start = end
      end += 4
      (self.fingerSpread,) = _struct_f.unpack(str[start:end])
      start = end
      end += 12
      self.proximalJointAngle = _struct_3f.unpack(str[start:end])
      self.distalJointAngle = []
      for i in range(0, 3):
        val1 = handle_msgs.msg.Finger()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.proximal = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.distal = struct.unpack(pattern, str[start:end])
        self.distalJointAngle.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      for val1 in self.fingerTactile:
        length = len(val1.proximal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.proximal.tostring())
        length = len(val1.distal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.distal.tostring())
      buff.write(self.palmTactile.tostring())
      buff.write(_struct_f.pack(self.fingerSpread))
      buff.write(self.proximalJointAngle.tostring())
      for val1 in self.distalJointAngle:
        length = len(val1.proximal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.proximal.tostring())
        length = len(val1.distal)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.distal.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.fingerTactile is None:
        self.fingerTactile = None
      if self.distalJointAngle is None:
        self.distalJointAngle = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      self.fingerTactile = []
      for i in range(0, 3):
        val1 = handle_msgs.msg.Finger()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.proximal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.distal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.fingerTactile.append(val1)
      start = end
      end += 192
      self.palmTactile = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=48)
      start = end
      end += 4
      (self.fingerSpread,) = _struct_f.unpack(str[start:end])
      start = end
      end += 12
      self.proximalJointAngle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      self.distalJointAngle = []
      for i in range(0, 3):
        val1 = handle_msgs.msg.Finger()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.proximal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.distal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.distalJointAngle.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_48f = struct.Struct("<48f")
_struct_3I = struct.Struct("<3I")
_struct_3f = struct.Struct("<3f")
_struct_f = struct.Struct("<f")
