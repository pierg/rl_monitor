# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from atlas_msgs/AtlasBehaviorStepParams.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import atlas_msgs.msg

class AtlasBehaviorStepParams(genpy.Message):
  _md5sum = "fea683aa80fed08d9ec89dd950667373"
  _type = "atlas_msgs/AtlasBehaviorStepParams"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# parameters for single_step behavior
atlas_msgs/AtlasBehaviorStepData desired_step
bool use_demo_walk

================================================================================
MSG: atlas_msgs/AtlasBehaviorStepData
# multi_step walking trajectory parameters
uint32 step_index              # Step index, matlab style, starting from 1,
                               # monotonically increasing during walking
                               #  resets to 1 if robot leaves walk behaviors
uint32 foot_index              # Foot_index can be LEFT_FOOT or RIGHT_FOOT
float64 duration               # Step duration, when in doubt, 0.63s is a
                               # good guess.
geometry_msgs/Pose pose        # Foot pose in Atlas world frame
float64 swing_height           # Step apex swing height measured form the
                               # midpoint between the feet.

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['desired_step','use_demo_walk']
  _slot_types = ['atlas_msgs/AtlasBehaviorStepData','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       desired_step,use_demo_walk

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AtlasBehaviorStepParams, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.desired_step is None:
        self.desired_step = atlas_msgs.msg.AtlasBehaviorStepData()
      if self.use_demo_walk is None:
        self.use_demo_walk = False
    else:
      self.desired_step = atlas_msgs.msg.AtlasBehaviorStepData()
      self.use_demo_walk = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I9dB.pack(_x.desired_step.step_index, _x.desired_step.foot_index, _x.desired_step.duration, _x.desired_step.pose.position.x, _x.desired_step.pose.position.y, _x.desired_step.pose.position.z, _x.desired_step.pose.orientation.x, _x.desired_step.pose.orientation.y, _x.desired_step.pose.orientation.z, _x.desired_step.pose.orientation.w, _x.desired_step.swing_height, _x.use_demo_walk))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.desired_step is None:
        self.desired_step = atlas_msgs.msg.AtlasBehaviorStepData()
      end = 0
      _x = self
      start = end
      end += 81
      (_x.desired_step.step_index, _x.desired_step.foot_index, _x.desired_step.duration, _x.desired_step.pose.position.x, _x.desired_step.pose.position.y, _x.desired_step.pose.position.z, _x.desired_step.pose.orientation.x, _x.desired_step.pose.orientation.y, _x.desired_step.pose.orientation.z, _x.desired_step.pose.orientation.w, _x.desired_step.swing_height, _x.use_demo_walk,) = _struct_2I9dB.unpack(str[start:end])
      self.use_demo_walk = bool(self.use_demo_walk)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I9dB.pack(_x.desired_step.step_index, _x.desired_step.foot_index, _x.desired_step.duration, _x.desired_step.pose.position.x, _x.desired_step.pose.position.y, _x.desired_step.pose.position.z, _x.desired_step.pose.orientation.x, _x.desired_step.pose.orientation.y, _x.desired_step.pose.orientation.z, _x.desired_step.pose.orientation.w, _x.desired_step.swing_height, _x.use_demo_walk))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.desired_step is None:
        self.desired_step = atlas_msgs.msg.AtlasBehaviorStepData()
      end = 0
      _x = self
      start = end
      end += 81
      (_x.desired_step.step_index, _x.desired_step.foot_index, _x.desired_step.duration, _x.desired_step.pose.position.x, _x.desired_step.pose.position.y, _x.desired_step.pose.position.z, _x.desired_step.pose.orientation.x, _x.desired_step.pose.orientation.y, _x.desired_step.pose.orientation.z, _x.desired_step.pose.orientation.w, _x.desired_step.swing_height, _x.use_demo_walk,) = _struct_2I9dB.unpack(str[start:end])
      self.use_demo_walk = bool(self.use_demo_walk)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I9dB = struct.Struct("<2I9dB")
