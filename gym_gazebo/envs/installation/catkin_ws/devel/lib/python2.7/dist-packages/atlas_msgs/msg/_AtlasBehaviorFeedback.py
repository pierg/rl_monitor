# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from atlas_msgs/AtlasBehaviorFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AtlasBehaviorFeedback(genpy.Message):
  _md5sum = "f7b1da61a8fcdd81f1e8d9a700d9d2bd"
  _type = "atlas_msgs/AtlasBehaviorFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# mirrors AtlasBehaviorFeedback
#
# Transition flags:
#    - STATUS_TRANSITION_IN_PROGRESS
#
#        A transition is in progress.
#
#    - STATUS_TRANSITION_SUCCESS
#
#        Successful transition.
#
#    - STATUS_FAILED_TRANS_UNKNOWN_BEHAVIOR
#
#        Failed to transition; unknown behavior.
#
#    - STATUS_FAILED_TRANS_ILLEGAL_BEHAVIOR
#
#        Denied request for an illegal behavior transition.  This may
#        happen if a transition to a new behavior is requested without
#        going through a required intermediate behavior. (e.g., can't
#        go from Walk straight to Manipulate.)
#
#    - STATUS_FAILED_TRANS_COM_POS
#
#        Failed to transition; the position of the COM is too far from
#        the center of support.
#
#    - STATUS_FAILED_TRANS_COM_VEL
#
#        Failed to transition; the COM velocity too high.
#
#    - STATUS_FAILED_TRANS_VEL
#
#        Failed to transition; some joint velocities too high.
#
#  \em Warnings:
#
#    - STATUS_WARNING_AUTO_TRANS
#
#        An automatic transition occurred; see behavior specific
#        feedback for reason.
#
#  \em Errors:
#
#    - STATUS_ERROR_FALLING
#
#        COM below acceptable threshold, cannot recover.

# copied from AtlasBehaviorFlags
uint32 STATUS_OK                            = 0
uint32 STATUS_TRANSITION_IN_PROGRESS        = 1
uint32 STATUS_TRANSITION_SUCCESS            = 2
uint32 STATUS_FAILED_TRANS_UNKNOWN_BEHAVIOR = 4
uint32 STATUS_FAILED_TRANS_ILLEGAL_BEHAVIOR = 8
uint32 STATUS_FAILED_TRANS_COM_POS          = 16
uint32 STATUS_FAILED_TRANS_COM_VEL          = 32
uint32 STATUS_FAILED_TRANS_VEL              = 64
uint32 STATUS_WARNING_AUTO_TRANS            = 128
uint32 STATUS_ERROR_FALLING                 = 256

uint32 status_flags  # can be one of above

int32 trans_from_behavior_index  # use this as a parm to get_behavior_at_index() to get behavior string
int32 trans_to_behavior_index  # use this as a parm to get_behavior_at_index() to get behavior string
"""
  # Pseudo-constants
  STATUS_OK = 0
  STATUS_TRANSITION_IN_PROGRESS = 1
  STATUS_TRANSITION_SUCCESS = 2
  STATUS_FAILED_TRANS_UNKNOWN_BEHAVIOR = 4
  STATUS_FAILED_TRANS_ILLEGAL_BEHAVIOR = 8
  STATUS_FAILED_TRANS_COM_POS = 16
  STATUS_FAILED_TRANS_COM_VEL = 32
  STATUS_FAILED_TRANS_VEL = 64
  STATUS_WARNING_AUTO_TRANS = 128
  STATUS_ERROR_FALLING = 256

  __slots__ = ['status_flags','trans_from_behavior_index','trans_to_behavior_index']
  _slot_types = ['uint32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status_flags,trans_from_behavior_index,trans_to_behavior_index

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AtlasBehaviorFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status_flags is None:
        self.status_flags = 0
      if self.trans_from_behavior_index is None:
        self.trans_from_behavior_index = 0
      if self.trans_to_behavior_index is None:
        self.trans_to_behavior_index = 0
    else:
      self.status_flags = 0
      self.trans_from_behavior_index = 0
      self.trans_to_behavior_index = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_I2i.pack(_x.status_flags, _x.trans_from_behavior_index, _x.trans_to_behavior_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.status_flags, _x.trans_from_behavior_index, _x.trans_to_behavior_index,) = _struct_I2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_I2i.pack(_x.status_flags, _x.trans_from_behavior_index, _x.trans_to_behavior_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.status_flags, _x.trans_from_behavior_index, _x.trans_to_behavior_index,) = _struct_I2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_I2i = struct.Struct("<I2i")
