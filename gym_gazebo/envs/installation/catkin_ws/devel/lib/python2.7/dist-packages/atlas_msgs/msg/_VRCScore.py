# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from atlas_msgs/VRCScore.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class VRCScore(genpy.Message):
  _md5sum = "15d1f218676ad0e9382ec3bd7afd4995"
  _type = "atlas_msgs/VRCScore"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Potential values for task_type
uint32 TASK_OTHER = 0
uint32 TASK_DRIVING = 1
uint32 TASK_WALKING = 2
uint32 TASK_MANIPULATION = 3
# Absolute wall time
time wall_time
# Absolute sim time
time sim_time
# Wall time elapsed since passing the first gate
time wall_time_elapsed
# Sim time elapsed since passing the first gate
time sim_time_elapsed
# How many parts of the task have been accomplished (e.g., gates traversed)
int32 completion_score
# How many damaging falls detected
int32 falls
# Optional message to describe events
string message
# Which type of task
uint32 task_type
"""
  # Pseudo-constants
  TASK_OTHER = 0
  TASK_DRIVING = 1
  TASK_WALKING = 2
  TASK_MANIPULATION = 3

  __slots__ = ['wall_time','sim_time','wall_time_elapsed','sim_time_elapsed','completion_score','falls','message','task_type']
  _slot_types = ['time','time','time','time','int32','int32','string','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wall_time,sim_time,wall_time_elapsed,sim_time_elapsed,completion_score,falls,message,task_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VRCScore, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.wall_time is None:
        self.wall_time = genpy.Time()
      if self.sim_time is None:
        self.sim_time = genpy.Time()
      if self.wall_time_elapsed is None:
        self.wall_time_elapsed = genpy.Time()
      if self.sim_time_elapsed is None:
        self.sim_time_elapsed = genpy.Time()
      if self.completion_score is None:
        self.completion_score = 0
      if self.falls is None:
        self.falls = 0
      if self.message is None:
        self.message = ''
      if self.task_type is None:
        self.task_type = 0
    else:
      self.wall_time = genpy.Time()
      self.sim_time = genpy.Time()
      self.wall_time_elapsed = genpy.Time()
      self.sim_time_elapsed = genpy.Time()
      self.completion_score = 0
      self.falls = 0
      self.message = ''
      self.task_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8I2i.pack(_x.wall_time.secs, _x.wall_time.nsecs, _x.sim_time.secs, _x.sim_time.nsecs, _x.wall_time_elapsed.secs, _x.wall_time_elapsed.nsecs, _x.sim_time_elapsed.secs, _x.sim_time_elapsed.nsecs, _x.completion_score, _x.falls))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.task_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.wall_time is None:
        self.wall_time = genpy.Time()
      if self.sim_time is None:
        self.sim_time = genpy.Time()
      if self.wall_time_elapsed is None:
        self.wall_time_elapsed = genpy.Time()
      if self.sim_time_elapsed is None:
        self.sim_time_elapsed = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.wall_time.secs, _x.wall_time.nsecs, _x.sim_time.secs, _x.sim_time.nsecs, _x.wall_time_elapsed.secs, _x.wall_time_elapsed.nsecs, _x.sim_time_elapsed.secs, _x.sim_time_elapsed.nsecs, _x.completion_score, _x.falls,) = _struct_8I2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8')
      else:
        self.message = str[start:end]
      start = end
      end += 4
      (self.task_type,) = _struct_I.unpack(str[start:end])
      self.wall_time.canon()
      self.sim_time.canon()
      self.wall_time_elapsed.canon()
      self.sim_time_elapsed.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8I2i.pack(_x.wall_time.secs, _x.wall_time.nsecs, _x.sim_time.secs, _x.sim_time.nsecs, _x.wall_time_elapsed.secs, _x.wall_time_elapsed.nsecs, _x.sim_time_elapsed.secs, _x.sim_time_elapsed.nsecs, _x.completion_score, _x.falls))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.task_type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.wall_time is None:
        self.wall_time = genpy.Time()
      if self.sim_time is None:
        self.sim_time = genpy.Time()
      if self.wall_time_elapsed is None:
        self.wall_time_elapsed = genpy.Time()
      if self.sim_time_elapsed is None:
        self.sim_time_elapsed = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.wall_time.secs, _x.wall_time.nsecs, _x.sim_time.secs, _x.sim_time.nsecs, _x.wall_time_elapsed.secs, _x.wall_time_elapsed.nsecs, _x.sim_time_elapsed.secs, _x.sim_time_elapsed.nsecs, _x.completion_score, _x.falls,) = _struct_8I2i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8')
      else:
        self.message = str[start:end]
      start = end
      end += 4
      (self.task_type,) = _struct_I.unpack(str[start:end])
      self.wall_time.canon()
      self.sim_time.canon()
      self.wall_time_elapsed.canon()
      self.sim_time_elapsed.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8I2i = struct.Struct("<8I2i")
