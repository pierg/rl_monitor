# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from atlas_msgs/AtlasSimInterfaceCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import atlas_msgs.msg
import std_msgs.msg

class AtlasSimInterfaceCommand(genpy.Message):
  _md5sum = "4fcf9a08c4ac40ae2fb1b5d8e177eae8"
  _type = "atlas_msgs/AtlasSimInterfaceCommand"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# For interfacing AtlasSimInterface Dynamics Behavior Library
# This ROS message should track behavior commands in AtlasControlInput struct
# inside AtlasSimInterfaceTypes.h.
# With the exception of addition of k_effort to provide user a way to switch
# to/from PID servo control in AtlasPlugin.cpp on a per joint basis.

Header header

# permissible values for behavior
# Updated to match the values in AtlasRobotInterface/AtlasInterfaceTypes.h.
int32 NONE              =  0 # Robot currently not in any behavior; software freeze, controls disabled.
int32 FREEZE            =  1 # safety mode
int32 STAND_PREP        =  2 # stand-prep (AtlasSimInterface documentation)
int32 STAND             =  3 # stand
int32 WALK              =  4 # multi-step walk
int32 STEP              =  5 # single step walk
int32 MANIPULATE        =  6 # stand and allows manipulation.
int32 USER              =  7 # disable AtlasSimInterface updates, rely on
                             # /atlas/atlas_command or /atlas/joint_commands

int32 behavior                # can be one of
                              # NONE, USER, FREEZE, STAND_PREP
                              # WALK, STEP, STAND, MANIPULATE

# multi_step walking trajectory parameters
atlas_msgs/AtlasBehaviorWalkParams walk_params

# parameters for single_step behavior
atlas_msgs/AtlasBehaviorStepParams step_params

# parameters for standing behavior
atlas_msgs/AtlasBehaviorStandParams stand_params

# parameters for stand and manipulate
atlas_msgs/AtlasBehaviorManipulateParams manipulate_params

# additional vector for transitioning from servo model in AtlasPlugin
# to BDI servo.

uint8[] k_effort       # k_effort can be an unsigned int 8value from 0 to 255, 
                       # at run time, a double between 0 and 1 is obtained
                       # by dividing by 255.0d.

# servo control in AtlasSimInterface
float64[] position
float64[] velocity
float64[] effort

float32[] kp_position
float32[] ki_position
float32[] kp_velocity

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: atlas_msgs/AtlasBehaviorWalkParams
# multi_step walking trajectory parameters
atlas_msgs/AtlasBehaviorStepData[4] step_queue
bool use_demo_walk

================================================================================
MSG: atlas_msgs/AtlasBehaviorStepData
# multi_step walking trajectory parameters
uint32 step_index              # Step index, matlab style, starting from 1,
                               # monotonically increasing during walking
                               #  resets to 1 if robot leaves walk behaviors
uint32 foot_index              # Foot_index can be LEFT_FOOT or RIGHT_FOOT
float64 duration               # Step duration, when in doubt, 0.63s is a
                               # good guess.
geometry_msgs/Pose pose        # Foot pose in Atlas world frame
float64 swing_height           # Step apex swing height measured form the
                               # midpoint between the feet.

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: atlas_msgs/AtlasBehaviorStepParams
# parameters for single_step behavior
atlas_msgs/AtlasBehaviorStepData desired_step
bool use_demo_walk

================================================================================
MSG: atlas_msgs/AtlasBehaviorStandParams
# stand parameters
int32 placeholder
# etc., more to come

================================================================================
MSG: atlas_msgs/AtlasBehaviorManipulateParams
# mirrored from AtlasControlTypes.h
bool use_desired
atlas_msgs/AtlasBehaviorPelvisServoParams desired
bool use_demo_mode

================================================================================
MSG: atlas_msgs/AtlasBehaviorPelvisServoParams
# mirrored from AtlasControlTypes.h

float64 pelvis_height
float64 pelvis_yaw

float64 pelvis_lat  # deprecated Atlas V3

float64 pelvis_pitch
float64 pelvis_roll
float64 com_v0
float64 com_v1"""
  # Pseudo-constants
  NONE = 0
  FREEZE = 1
  STAND_PREP = 2
  STAND = 3
  WALK = 4
  STEP = 5
  MANIPULATE = 6
  USER = 7

  __slots__ = ['header','behavior','walk_params','step_params','stand_params','manipulate_params','k_effort','position','velocity','effort','kp_position','ki_position','kp_velocity']
  _slot_types = ['std_msgs/Header','int32','atlas_msgs/AtlasBehaviorWalkParams','atlas_msgs/AtlasBehaviorStepParams','atlas_msgs/AtlasBehaviorStandParams','atlas_msgs/AtlasBehaviorManipulateParams','uint8[]','float64[]','float64[]','float64[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,behavior,walk_params,step_params,stand_params,manipulate_params,k_effort,position,velocity,effort,kp_position,ki_position,kp_velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AtlasSimInterfaceCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.behavior is None:
        self.behavior = 0
      if self.walk_params is None:
        self.walk_params = atlas_msgs.msg.AtlasBehaviorWalkParams()
      if self.step_params is None:
        self.step_params = atlas_msgs.msg.AtlasBehaviorStepParams()
      if self.stand_params is None:
        self.stand_params = atlas_msgs.msg.AtlasBehaviorStandParams()
      if self.manipulate_params is None:
        self.manipulate_params = atlas_msgs.msg.AtlasBehaviorManipulateParams()
      if self.k_effort is None:
        self.k_effort = ''
      if self.position is None:
        self.position = []
      if self.velocity is None:
        self.velocity = []
      if self.effort is None:
        self.effort = []
      if self.kp_position is None:
        self.kp_position = []
      if self.ki_position is None:
        self.ki_position = []
      if self.kp_velocity is None:
        self.kp_velocity = []
    else:
      self.header = std_msgs.msg.Header()
      self.behavior = 0
      self.walk_params = atlas_msgs.msg.AtlasBehaviorWalkParams()
      self.step_params = atlas_msgs.msg.AtlasBehaviorStepParams()
      self.stand_params = atlas_msgs.msg.AtlasBehaviorStandParams()
      self.manipulate_params = atlas_msgs.msg.AtlasBehaviorManipulateParams()
      self.k_effort = ''
      self.position = []
      self.velocity = []
      self.effort = []
      self.kp_position = []
      self.ki_position = []
      self.kp_velocity = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.behavior))
      for val1 in self.walk_params.step_queue:
        _x = val1
        buff.write(_struct_2Id.pack(_x.step_index, _x.foot_index, _x.duration))
        _v1 = val1.pose
        _v2 = _v1.position
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.swing_height))
      _x = self
      buff.write(_struct_B2I9dBiB7dB.pack(_x.walk_params.use_demo_walk, _x.step_params.desired_step.step_index, _x.step_params.desired_step.foot_index, _x.step_params.desired_step.duration, _x.step_params.desired_step.pose.position.x, _x.step_params.desired_step.pose.position.y, _x.step_params.desired_step.pose.position.z, _x.step_params.desired_step.pose.orientation.x, _x.step_params.desired_step.pose.orientation.y, _x.step_params.desired_step.pose.orientation.z, _x.step_params.desired_step.pose.orientation.w, _x.step_params.desired_step.swing_height, _x.step_params.use_demo_walk, _x.stand_params.placeholder, _x.manipulate_params.use_desired, _x.manipulate_params.desired.pelvis_height, _x.manipulate_params.desired.pelvis_yaw, _x.manipulate_params.desired.pelvis_lat, _x.manipulate_params.desired.pelvis_pitch, _x.manipulate_params.desired.pelvis_roll, _x.manipulate_params.desired.com_v0, _x.manipulate_params.desired.com_v1, _x.manipulate_params.use_demo_mode))
      _x = self.k_effort
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position))
      length = len(self.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.velocity))
      length = len(self.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.effort))
      length = len(self.kp_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.kp_position))
      length = len(self.ki_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.ki_position))
      length = len(self.kp_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.kp_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.walk_params is None:
        self.walk_params = atlas_msgs.msg.AtlasBehaviorWalkParams()
      if self.step_params is None:
        self.step_params = atlas_msgs.msg.AtlasBehaviorStepParams()
      if self.stand_params is None:
        self.stand_params = atlas_msgs.msg.AtlasBehaviorStandParams()
      if self.manipulate_params is None:
        self.manipulate_params = atlas_msgs.msg.AtlasBehaviorManipulateParams()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.behavior,) = _struct_i.unpack(str[start:end])
      self.walk_params.step_queue = []
      for i in range(0, 4):
        val1 = atlas_msgs.msg.AtlasBehaviorStepData()
        _x = val1
        start = end
        end += 16
        (_x.step_index, _x.foot_index, _x.duration,) = _struct_2Id.unpack(str[start:end])
        _v4 = val1.pose
        _v5 = _v4.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v6 = _v4.orientation
        _x = _v6
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.swing_height,) = _struct_d.unpack(str[start:end])
        self.walk_params.step_queue.append(val1)
      _x = self
      start = end
      end += 144
      (_x.walk_params.use_demo_walk, _x.step_params.desired_step.step_index, _x.step_params.desired_step.foot_index, _x.step_params.desired_step.duration, _x.step_params.desired_step.pose.position.x, _x.step_params.desired_step.pose.position.y, _x.step_params.desired_step.pose.position.z, _x.step_params.desired_step.pose.orientation.x, _x.step_params.desired_step.pose.orientation.y, _x.step_params.desired_step.pose.orientation.z, _x.step_params.desired_step.pose.orientation.w, _x.step_params.desired_step.swing_height, _x.step_params.use_demo_walk, _x.stand_params.placeholder, _x.manipulate_params.use_desired, _x.manipulate_params.desired.pelvis_height, _x.manipulate_params.desired.pelvis_yaw, _x.manipulate_params.desired.pelvis_lat, _x.manipulate_params.desired.pelvis_pitch, _x.manipulate_params.desired.pelvis_roll, _x.manipulate_params.desired.com_v0, _x.manipulate_params.desired.com_v1, _x.manipulate_params.use_demo_mode,) = _struct_B2I9dBiB7dB.unpack(str[start:end])
      self.walk_params.use_demo_walk = bool(self.walk_params.use_demo_walk)
      self.step_params.use_demo_walk = bool(self.step_params.use_demo_walk)
      self.manipulate_params.use_desired = bool(self.manipulate_params.use_desired)
      self.manipulate_params.use_demo_mode = bool(self.manipulate_params.use_demo_mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.k_effort = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.kp_position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.ki_position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.kp_velocity = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.behavior))
      for val1 in self.walk_params.step_queue:
        _x = val1
        buff.write(_struct_2Id.pack(_x.step_index, _x.foot_index, _x.duration))
        _v7 = val1.pose
        _v8 = _v7.position
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = _v7.orientation
        _x = _v9
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.swing_height))
      _x = self
      buff.write(_struct_B2I9dBiB7dB.pack(_x.walk_params.use_demo_walk, _x.step_params.desired_step.step_index, _x.step_params.desired_step.foot_index, _x.step_params.desired_step.duration, _x.step_params.desired_step.pose.position.x, _x.step_params.desired_step.pose.position.y, _x.step_params.desired_step.pose.position.z, _x.step_params.desired_step.pose.orientation.x, _x.step_params.desired_step.pose.orientation.y, _x.step_params.desired_step.pose.orientation.z, _x.step_params.desired_step.pose.orientation.w, _x.step_params.desired_step.swing_height, _x.step_params.use_demo_walk, _x.stand_params.placeholder, _x.manipulate_params.use_desired, _x.manipulate_params.desired.pelvis_height, _x.manipulate_params.desired.pelvis_yaw, _x.manipulate_params.desired.pelvis_lat, _x.manipulate_params.desired.pelvis_pitch, _x.manipulate_params.desired.pelvis_roll, _x.manipulate_params.desired.com_v0, _x.manipulate_params.desired.com_v1, _x.manipulate_params.use_demo_mode))
      _x = self.k_effort
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position.tostring())
      length = len(self.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.velocity.tostring())
      length = len(self.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.effort.tostring())
      length = len(self.kp_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.kp_position.tostring())
      length = len(self.ki_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.ki_position.tostring())
      length = len(self.kp_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.kp_velocity.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.walk_params is None:
        self.walk_params = atlas_msgs.msg.AtlasBehaviorWalkParams()
      if self.step_params is None:
        self.step_params = atlas_msgs.msg.AtlasBehaviorStepParams()
      if self.stand_params is None:
        self.stand_params = atlas_msgs.msg.AtlasBehaviorStandParams()
      if self.manipulate_params is None:
        self.manipulate_params = atlas_msgs.msg.AtlasBehaviorManipulateParams()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.behavior,) = _struct_i.unpack(str[start:end])
      self.walk_params.step_queue = []
      for i in range(0, 4):
        val1 = atlas_msgs.msg.AtlasBehaviorStepData()
        _x = val1
        start = end
        end += 16
        (_x.step_index, _x.foot_index, _x.duration,) = _struct_2Id.unpack(str[start:end])
        _v10 = val1.pose
        _v11 = _v10.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v12 = _v10.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.swing_height,) = _struct_d.unpack(str[start:end])
        self.walk_params.step_queue.append(val1)
      _x = self
      start = end
      end += 144
      (_x.walk_params.use_demo_walk, _x.step_params.desired_step.step_index, _x.step_params.desired_step.foot_index, _x.step_params.desired_step.duration, _x.step_params.desired_step.pose.position.x, _x.step_params.desired_step.pose.position.y, _x.step_params.desired_step.pose.position.z, _x.step_params.desired_step.pose.orientation.x, _x.step_params.desired_step.pose.orientation.y, _x.step_params.desired_step.pose.orientation.z, _x.step_params.desired_step.pose.orientation.w, _x.step_params.desired_step.swing_height, _x.step_params.use_demo_walk, _x.stand_params.placeholder, _x.manipulate_params.use_desired, _x.manipulate_params.desired.pelvis_height, _x.manipulate_params.desired.pelvis_yaw, _x.manipulate_params.desired.pelvis_lat, _x.manipulate_params.desired.pelvis_pitch, _x.manipulate_params.desired.pelvis_roll, _x.manipulate_params.desired.com_v0, _x.manipulate_params.desired.com_v1, _x.manipulate_params.use_demo_mode,) = _struct_B2I9dBiB7dB.unpack(str[start:end])
      self.walk_params.use_demo_walk = bool(self.walk_params.use_demo_walk)
      self.step_params.use_demo_walk = bool(self.step_params.use_demo_walk)
      self.manipulate_params.use_desired = bool(self.manipulate_params.use_desired)
      self.manipulate_params.use_demo_mode = bool(self.manipulate_params.use_demo_mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.k_effort = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.kp_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.ki_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.kp_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
_struct_i = struct.Struct("<i")
_struct_3I = struct.Struct("<3I")
_struct_B2I9dBiB7dB = struct.Struct("<B2I9dBiB7dB")
_struct_4d = struct.Struct("<4d")
_struct_2Id = struct.Struct("<2Id")
_struct_3d = struct.Struct("<3d")
