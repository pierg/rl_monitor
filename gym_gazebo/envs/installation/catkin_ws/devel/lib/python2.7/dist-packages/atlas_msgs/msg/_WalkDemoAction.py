# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from atlas_msgs/WalkDemoAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import genpy
import actionlib_msgs.msg
import atlas_msgs.msg

class WalkDemoAction(genpy.Message):
  _md5sum = "dec6d13e3463f3ef3113d4087856cd23"
  _type = "atlas_msgs/WalkDemoAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

WalkDemoActionGoal action_goal
WalkDemoActionResult action_result
WalkDemoActionFeedback action_feedback

================================================================================
MSG: atlas_msgs/WalkDemoActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
WalkDemoGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: atlas_msgs/WalkDemoGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
# For Setting MultiStep Walking Commands
Header header

# permissible values for behavior
int32 STAND             =  0 # stand
int32 USER              =  1 # disable AtlasSimInterface updates, rely on
                             # /atlas/atlas_command or /atlas/joint_commands
int32 FREEZE            =  2 # safety mode
int32 STAND_PREP        =  3 # stand-prep (AtlasSimInterface documentation)
int32 WALK              =  4 # multi-step walk
int32 STEP              =  5 # single step walk
int32 MANIPULATE        =  6 # stand and allows manipulation.

int32 behavior                # can be one of
                              # USER, FREEZE, STAND_PREP
                              # WALK, STEP, STAND, MANIPULATE
                              # DEMO1, DEMO2

# multi_step walking trajectory parameters
atlas_msgs/AtlasBehaviorStepData[] steps

# parameters for single_step behavior
atlas_msgs/AtlasBehaviorStepParams step_params

# parameters for standing behavior
atlas_msgs/AtlasBehaviorStandParams stand_params

# parameters for stand and manipulate
atlas_msgs/AtlasBehaviorManipulateParams manipulate_params

# same k_effort as AtlasCommand
uint8[] k_effort       # k_effort can be an unsigned int 8value from 0 to 255, 
                       # at run time, a double between 0 and 1 is obtained
                       # by dividing by 255.0d.


================================================================================
MSG: atlas_msgs/AtlasBehaviorStepData
# multi_step walking trajectory parameters
uint32 step_index              # Step index, matlab style, starting from 1,
                               # monotonically increasing during walking
                               #  resets to 1 if robot leaves walk behaviors
uint32 foot_index              # Foot_index can be LEFT_FOOT or RIGHT_FOOT
float64 duration               # Step duration, when in doubt, 0.63s is a
                               # good guess.
geometry_msgs/Pose pose        # Foot pose in Atlas world frame
float64 swing_height           # Step apex swing height measured form the
                               # midpoint between the feet.

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: atlas_msgs/AtlasBehaviorStepParams
# parameters for single_step behavior
atlas_msgs/AtlasBehaviorStepData desired_step
bool use_demo_walk

================================================================================
MSG: atlas_msgs/AtlasBehaviorStandParams
# stand parameters
int32 placeholder
# etc., more to come

================================================================================
MSG: atlas_msgs/AtlasBehaviorManipulateParams
# mirrored from AtlasControlTypes.h
bool use_desired
atlas_msgs/AtlasBehaviorPelvisServoParams desired
bool use_demo_mode

================================================================================
MSG: atlas_msgs/AtlasBehaviorPelvisServoParams
# mirrored from AtlasControlTypes.h

float64 pelvis_height
float64 pelvis_yaw

float64 pelvis_lat  # deprecated Atlas V3

float64 pelvis_pitch
float64 pelvis_roll
float64 com_v0
float64 com_v1
================================================================================
MSG: atlas_msgs/WalkDemoActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
WalkDemoResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: atlas_msgs/WalkDemoResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Result
atlas_msgs/AtlasSimInterfaceState end_state
bool success

================================================================================
MSG: atlas_msgs/AtlasSimInterfaceState
# For interfacing Boston Dynamics' AtlasSimInterface Dynamics Behavior Library
# Feedback from AtlasSimInterface Controller after calling process_control_input
# This ROS message should track AtlasControlOutput struct in
# AtlasSimInterfaceTypes.h.
# With the exception of addition of k_effort to provide user a way to switch
# to/from PID servo control in AtlasPlugin.cpp on a per joint basis.

int32 NO_ERRORS                        =  0    # no error detected
int32 ERROR_UNSPECIFIED                = -1    # unspecified error
int32 ERROR_VALUE_OUT_OF_RANGE         = -2    # passed value is out of range
int32 ERROR_INVALID_INDEX              = -3    # passed index is invalid (too low or too high)
int32 ERROR_FAILED_TO_START_BEHAVIOR   = -4    # robot failed to start desired behavior
int32 ERROR_NO_ACTIVE_BEHAVIOR         = -5    # robot has no active behavior
int32 ERROR_NO_SUCH_BEHAVIOR           = -6    # behavior doesn't exist
int32 ERROR_BEHAVIOR_NOT_IMPLEMENTED   = -7    # behavior exists but not implemented
int32 ERROR_TIME_RAN_BACKWARD          = -8    # a time earlier than previous times was given

Header header

int32 error_code                         # error code returned by
                                         # process_control_input.
                                         # See AtlasSimInterfaceTypes.h
                                         # AtlasErrorCode for list of enums.
                                         # The list is mimic'd here above.

int32 current_behavior                   # current active behavior.
int32 desired_behavior                   # desired behavior specified by usesr
                                         # input. This may lag from
                                         # current_behavior by a few simulation
                                         # steps.

# below are information from AtlasControlOutput in AtlasSimInterfaceTypes.h

float64[30] f_out                        # torque command from BDI controller. The first 28 values are used by Atlas versions < 4

atlas_msgs/AtlasPositionData pos_est     # Position and velocity estimate of robot pelvis

geometry_msgs/Pose[2] foot_pos_est      # World position estimate for feet
                                         # 0 - left, 1 - right

atlas_msgs/AtlasBehaviorFeedback behavior_feedback
atlas_msgs/AtlasBehaviorStepFeedback step_feedback
atlas_msgs/AtlasBehaviorStandFeedback stand_feedback
atlas_msgs/AtlasBehaviorWalkFeedback walk_feedback
atlas_msgs/AtlasBehaviorManipulateFeedback manipulate_feedback

# additional vector for transitioning from servo model in AtlasPlugin
# to BDI servo.

uint8[] k_effort       # k_effort can be an unsigned int 8value from 0 to 255, 
                       # at run time, a double between 0 and 1 is obtained
                       # by dividing by 255.0d.


================================================================================
MSG: atlas_msgs/AtlasPositionData
# mirrors AtlasPositionData in AtlasControlTypes.h
geometry_msgs/Vector3 position
geometry_msgs/Vector3 velocity

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: atlas_msgs/AtlasBehaviorFeedback
# mirrors AtlasBehaviorFeedback
#
# Transition flags:
#    - STATUS_TRANSITION_IN_PROGRESS
#
#        A transition is in progress.
#
#    - STATUS_TRANSITION_SUCCESS
#
#        Successful transition.
#
#    - STATUS_FAILED_TRANS_UNKNOWN_BEHAVIOR
#
#        Failed to transition; unknown behavior.
#
#    - STATUS_FAILED_TRANS_ILLEGAL_BEHAVIOR
#
#        Denied request for an illegal behavior transition.  This may
#        happen if a transition to a new behavior is requested without
#        going through a required intermediate behavior. (e.g., can't
#        go from Walk straight to Manipulate.)
#
#    - STATUS_FAILED_TRANS_COM_POS
#
#        Failed to transition; the position of the COM is too far from
#        the center of support.
#
#    - STATUS_FAILED_TRANS_COM_VEL
#
#        Failed to transition; the COM velocity too high.
#
#    - STATUS_FAILED_TRANS_VEL
#
#        Failed to transition; some joint velocities too high.
#
#  \em Warnings:
#
#    - STATUS_WARNING_AUTO_TRANS
#
#        An automatic transition occurred; see behavior specific
#        feedback for reason.
#
#  \em Errors:
#
#    - STATUS_ERROR_FALLING
#
#        COM below acceptable threshold, cannot recover.

# copied from AtlasBehaviorFlags
uint32 STATUS_OK                            = 0
uint32 STATUS_TRANSITION_IN_PROGRESS        = 1
uint32 STATUS_TRANSITION_SUCCESS            = 2
uint32 STATUS_FAILED_TRANS_UNKNOWN_BEHAVIOR = 4
uint32 STATUS_FAILED_TRANS_ILLEGAL_BEHAVIOR = 8
uint32 STATUS_FAILED_TRANS_COM_POS          = 16
uint32 STATUS_FAILED_TRANS_COM_VEL          = 32
uint32 STATUS_FAILED_TRANS_VEL              = 64
uint32 STATUS_WARNING_AUTO_TRANS            = 128
uint32 STATUS_ERROR_FALLING                 = 256

uint32 status_flags  # can be one of above

int32 trans_from_behavior_index  # use this as a parm to get_behavior_at_index() to get behavior string
int32 trans_to_behavior_index  # use this as a parm to get_behavior_at_index() to get behavior string

================================================================================
MSG: atlas_msgs/AtlasBehaviorStepFeedback
# mirrored from AtlasControlTypes.h
uint32 STEP_SUBSTATE_SWAYING = 0  # Feet are in double support. This flag does not latch. Only one of STEP_SUBSTATE_SWAYING or STEP_SUBSTATE_STEPPING will be set at any given time.
uint32 STEP_SUBSTATE_STEPPING = 1 # Actively stepping; one foot is in the air. This flag does not latch.

uint32 status_flags    # use AtlasBeahviorFeedback/status_flags
float64 t_step_rem
uint32 current_step_index
uint32 next_step_index_needed
atlas_msgs/AtlasBehaviorStepData desired_step_saturated

================================================================================
MSG: atlas_msgs/AtlasBehaviorStandFeedback
# mirrored from AtlasControlTypes.h
uint32 status_flags    # use AtlasBeahviorStandFlags

================================================================================
MSG: atlas_msgs/AtlasBehaviorWalkFeedback
# mirrored from AtlasControlTypes.h
float64 t_step_rem
uint32 current_step_index
uint32 next_step_index_needed
uint32 status_flags    # use AtlasBeahviorFeedback/status_flags
atlas_msgs/AtlasBehaviorStepData[4] step_queue_saturated # 4 is hardcoded in AtlasSimInterface library.

================================================================================
MSG: atlas_msgs/AtlasBehaviorManipulateFeedback
# mirrored from AtlasControlTypes.h
uint32 status_flags    # use AtlasBeahviorManipulateFlags
atlas_msgs/AtlasBehaviorPelvisServoParams clamped

================================================================================
MSG: atlas_msgs/WalkDemoActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
WalkDemoFeedback feedback

================================================================================
MSG: atlas_msgs/WalkDemoFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Feedback
atlas_msgs/AtlasSimInterfaceState state

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['atlas_msgs/WalkDemoActionGoal','atlas_msgs/WalkDemoActionResult','atlas_msgs/WalkDemoActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WalkDemoAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = atlas_msgs.msg.WalkDemoActionGoal()
      if self.action_result is None:
        self.action_result = atlas_msgs.msg.WalkDemoActionResult()
      if self.action_feedback is None:
        self.action_feedback = atlas_msgs.msg.WalkDemoActionFeedback()
    else:
      self.action_goal = atlas_msgs.msg.WalkDemoActionGoal()
      self.action_result = atlas_msgs.msg.WalkDemoActionResult()
      self.action_feedback = atlas_msgs.msg.WalkDemoActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.goal.header.seq, _x.action_goal.goal.header.stamp.secs, _x.action_goal.goal.header.stamp.nsecs))
      _x = self.action_goal.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.action_goal.goal.behavior))
      length = len(self.action_goal.goal.steps)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.steps:
        _x = val1
        buff.write(_struct_2Id.pack(_x.step_index, _x.foot_index, _x.duration))
        _v1 = val1.pose
        _v2 = _v1.position
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.swing_height))
      _x = self
      buff.write(_struct_2I9dBiB7dB.pack(_x.action_goal.goal.step_params.desired_step.step_index, _x.action_goal.goal.step_params.desired_step.foot_index, _x.action_goal.goal.step_params.desired_step.duration, _x.action_goal.goal.step_params.desired_step.pose.position.x, _x.action_goal.goal.step_params.desired_step.pose.position.y, _x.action_goal.goal.step_params.desired_step.pose.position.z, _x.action_goal.goal.step_params.desired_step.pose.orientation.x, _x.action_goal.goal.step_params.desired_step.pose.orientation.y, _x.action_goal.goal.step_params.desired_step.pose.orientation.z, _x.action_goal.goal.step_params.desired_step.pose.orientation.w, _x.action_goal.goal.step_params.desired_step.swing_height, _x.action_goal.goal.step_params.use_demo_walk, _x.action_goal.goal.stand_params.placeholder, _x.action_goal.goal.manipulate_params.use_desired, _x.action_goal.goal.manipulate_params.desired.pelvis_height, _x.action_goal.goal.manipulate_params.desired.pelvis_yaw, _x.action_goal.goal.manipulate_params.desired.pelvis_lat, _x.action_goal.goal.manipulate_params.desired.pelvis_pitch, _x.action_goal.goal.manipulate_params.desired.pelvis_roll, _x.action_goal.goal.manipulate_params.desired.com_v0, _x.action_goal.goal.manipulate_params.desired.com_v1, _x.action_goal.goal.manipulate_params.use_demo_mode))
      _x = self.action_goal.goal.k_effort
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.result.end_state.header.seq, _x.action_result.result.end_state.header.stamp.secs, _x.action_result.result.end_state.header.stamp.nsecs))
      _x = self.action_result.result.end_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i.pack(_x.action_result.result.end_state.error_code, _x.action_result.result.end_state.current_behavior, _x.action_result.result.end_state.desired_behavior))
      buff.write(_struct_30d.pack(*self.action_result.result.end_state.f_out))
      _x = self
      buff.write(_struct_6d.pack(_x.action_result.result.end_state.pos_est.position.x, _x.action_result.result.end_state.pos_est.position.y, _x.action_result.result.end_state.pos_est.position.z, _x.action_result.result.end_state.pos_est.velocity.x, _x.action_result.result.end_state.pos_est.velocity.y, _x.action_result.result.end_state.pos_est.velocity.z))
      for val1 in self.action_result.result.end_state.foot_pos_est:
        _v4 = val1.position
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = val1.orientation
        _x = _v5
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_struct_I2iId4I9dId3I.pack(_x.action_result.result.end_state.behavior_feedback.status_flags, _x.action_result.result.end_state.behavior_feedback.trans_from_behavior_index, _x.action_result.result.end_state.behavior_feedback.trans_to_behavior_index, _x.action_result.result.end_state.step_feedback.status_flags, _x.action_result.result.end_state.step_feedback.t_step_rem, _x.action_result.result.end_state.step_feedback.current_step_index, _x.action_result.result.end_state.step_feedback.next_step_index_needed, _x.action_result.result.end_state.step_feedback.desired_step_saturated.step_index, _x.action_result.result.end_state.step_feedback.desired_step_saturated.foot_index, _x.action_result.result.end_state.step_feedback.desired_step_saturated.duration, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.position.x, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.position.y, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.position.z, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.x, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.y, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.z, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.w, _x.action_result.result.end_state.step_feedback.desired_step_saturated.swing_height, _x.action_result.result.end_state.stand_feedback.status_flags, _x.action_result.result.end_state.walk_feedback.t_step_rem, _x.action_result.result.end_state.walk_feedback.current_step_index, _x.action_result.result.end_state.walk_feedback.next_step_index_needed, _x.action_result.result.end_state.walk_feedback.status_flags))
      for val1 in self.action_result.result.end_state.walk_feedback.step_queue_saturated:
        _x = val1
        buff.write(_struct_2Id.pack(_x.step_index, _x.foot_index, _x.duration))
        _v6 = val1.pose
        _v7 = _v6.position
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v8 = _v6.orientation
        _x = _v8
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.swing_height))
      _x = self
      buff.write(_struct_I7d.pack(_x.action_result.result.end_state.manipulate_feedback.status_flags, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_height, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_yaw, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_lat, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_pitch, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_roll, _x.action_result.result.end_state.manipulate_feedback.clamped.com_v0, _x.action_result.result.end_state.manipulate_feedback.clamped.com_v1))
      _x = self.action_result.result.end_state.k_effort
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3I.pack(_x.action_result.result.success, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.feedback.state.header.seq, _x.action_feedback.feedback.state.header.stamp.secs, _x.action_feedback.feedback.state.header.stamp.nsecs))
      _x = self.action_feedback.feedback.state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i.pack(_x.action_feedback.feedback.state.error_code, _x.action_feedback.feedback.state.current_behavior, _x.action_feedback.feedback.state.desired_behavior))
      buff.write(_struct_30d.pack(*self.action_feedback.feedback.state.f_out))
      _x = self
      buff.write(_struct_6d.pack(_x.action_feedback.feedback.state.pos_est.position.x, _x.action_feedback.feedback.state.pos_est.position.y, _x.action_feedback.feedback.state.pos_est.position.z, _x.action_feedback.feedback.state.pos_est.velocity.x, _x.action_feedback.feedback.state.pos_est.velocity.y, _x.action_feedback.feedback.state.pos_est.velocity.z))
      for val1 in self.action_feedback.feedback.state.foot_pos_est:
        _v9 = val1.position
        _x = _v9
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v10 = val1.orientation
        _x = _v10
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_struct_I2iId4I9dId3I.pack(_x.action_feedback.feedback.state.behavior_feedback.status_flags, _x.action_feedback.feedback.state.behavior_feedback.trans_from_behavior_index, _x.action_feedback.feedback.state.behavior_feedback.trans_to_behavior_index, _x.action_feedback.feedback.state.step_feedback.status_flags, _x.action_feedback.feedback.state.step_feedback.t_step_rem, _x.action_feedback.feedback.state.step_feedback.current_step_index, _x.action_feedback.feedback.state.step_feedback.next_step_index_needed, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.step_index, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.foot_index, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.duration, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.position.x, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.position.y, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.position.z, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.x, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.y, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.z, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.w, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.swing_height, _x.action_feedback.feedback.state.stand_feedback.status_flags, _x.action_feedback.feedback.state.walk_feedback.t_step_rem, _x.action_feedback.feedback.state.walk_feedback.current_step_index, _x.action_feedback.feedback.state.walk_feedback.next_step_index_needed, _x.action_feedback.feedback.state.walk_feedback.status_flags))
      for val1 in self.action_feedback.feedback.state.walk_feedback.step_queue_saturated:
        _x = val1
        buff.write(_struct_2Id.pack(_x.step_index, _x.foot_index, _x.duration))
        _v11 = val1.pose
        _v12 = _v11.position
        _x = _v12
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v13 = _v11.orientation
        _x = _v13
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.swing_height))
      _x = self
      buff.write(_struct_I7d.pack(_x.action_feedback.feedback.state.manipulate_feedback.status_flags, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_height, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_yaw, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_lat, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_pitch, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_roll, _x.action_feedback.feedback.state.manipulate_feedback.clamped.com_v0, _x.action_feedback.feedback.state.manipulate_feedback.clamped.com_v1))
      _x = self.action_feedback.feedback.state.k_effort
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = atlas_msgs.msg.WalkDemoActionGoal()
      if self.action_result is None:
        self.action_result = atlas_msgs.msg.WalkDemoActionResult()
      if self.action_feedback is None:
        self.action_feedback = atlas_msgs.msg.WalkDemoActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.header.seq, _x.action_goal.goal.header.stamp.secs, _x.action_goal.goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.action_goal.goal.behavior,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.steps = []
      for i in range(0, length):
        val1 = atlas_msgs.msg.AtlasBehaviorStepData()
        _x = val1
        start = end
        end += 16
        (_x.step_index, _x.foot_index, _x.duration,) = _struct_2Id.unpack(str[start:end])
        _v14 = val1.pose
        _v15 = _v14.position
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v16 = _v14.orientation
        _x = _v16
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.swing_height,) = _struct_d.unpack(str[start:end])
        self.action_goal.goal.steps.append(val1)
      _x = self
      start = end
      end += 143
      (_x.action_goal.goal.step_params.desired_step.step_index, _x.action_goal.goal.step_params.desired_step.foot_index, _x.action_goal.goal.step_params.desired_step.duration, _x.action_goal.goal.step_params.desired_step.pose.position.x, _x.action_goal.goal.step_params.desired_step.pose.position.y, _x.action_goal.goal.step_params.desired_step.pose.position.z, _x.action_goal.goal.step_params.desired_step.pose.orientation.x, _x.action_goal.goal.step_params.desired_step.pose.orientation.y, _x.action_goal.goal.step_params.desired_step.pose.orientation.z, _x.action_goal.goal.step_params.desired_step.pose.orientation.w, _x.action_goal.goal.step_params.desired_step.swing_height, _x.action_goal.goal.step_params.use_demo_walk, _x.action_goal.goal.stand_params.placeholder, _x.action_goal.goal.manipulate_params.use_desired, _x.action_goal.goal.manipulate_params.desired.pelvis_height, _x.action_goal.goal.manipulate_params.desired.pelvis_yaw, _x.action_goal.goal.manipulate_params.desired.pelvis_lat, _x.action_goal.goal.manipulate_params.desired.pelvis_pitch, _x.action_goal.goal.manipulate_params.desired.pelvis_roll, _x.action_goal.goal.manipulate_params.desired.com_v0, _x.action_goal.goal.manipulate_params.desired.com_v1, _x.action_goal.goal.manipulate_params.use_demo_mode,) = _struct_2I9dBiB7dB.unpack(str[start:end])
      self.action_goal.goal.step_params.use_demo_walk = bool(self.action_goal.goal.step_params.use_demo_walk)
      self.action_goal.goal.manipulate_params.use_desired = bool(self.action_goal.goal.manipulate_params.use_desired)
      self.action_goal.goal.manipulate_params.use_demo_mode = bool(self.action_goal.goal.manipulate_params.use_demo_mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_goal.goal.k_effort = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.end_state.header.seq, _x.action_result.result.end_state.header.stamp.secs, _x.action_result.result.end_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.end_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.end_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.end_state.error_code, _x.action_result.result.end_state.current_behavior, _x.action_result.result.end_state.desired_behavior,) = _struct_3i.unpack(str[start:end])
      start = end
      end += 240
      self.action_result.result.end_state.f_out = _struct_30d.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.action_result.result.end_state.pos_est.position.x, _x.action_result.result.end_state.pos_est.position.y, _x.action_result.result.end_state.pos_est.position.z, _x.action_result.result.end_state.pos_est.velocity.x, _x.action_result.result.end_state.pos_est.velocity.y, _x.action_result.result.end_state.pos_est.velocity.z,) = _struct_6d.unpack(str[start:end])
      self.action_result.result.end_state.foot_pos_est = []
      for i in range(0, 2):
        val1 = geometry_msgs.msg.Pose()
        _v17 = val1.position
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v18 = val1.orientation
        _x = _v18
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.action_result.result.end_state.foot_pos_est.append(val1)
      _x = self
      start = end
      end += 136
      (_x.action_result.result.end_state.behavior_feedback.status_flags, _x.action_result.result.end_state.behavior_feedback.trans_from_behavior_index, _x.action_result.result.end_state.behavior_feedback.trans_to_behavior_index, _x.action_result.result.end_state.step_feedback.status_flags, _x.action_result.result.end_state.step_feedback.t_step_rem, _x.action_result.result.end_state.step_feedback.current_step_index, _x.action_result.result.end_state.step_feedback.next_step_index_needed, _x.action_result.result.end_state.step_feedback.desired_step_saturated.step_index, _x.action_result.result.end_state.step_feedback.desired_step_saturated.foot_index, _x.action_result.result.end_state.step_feedback.desired_step_saturated.duration, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.position.x, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.position.y, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.position.z, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.x, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.y, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.z, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.w, _x.action_result.result.end_state.step_feedback.desired_step_saturated.swing_height, _x.action_result.result.end_state.stand_feedback.status_flags, _x.action_result.result.end_state.walk_feedback.t_step_rem, _x.action_result.result.end_state.walk_feedback.current_step_index, _x.action_result.result.end_state.walk_feedback.next_step_index_needed, _x.action_result.result.end_state.walk_feedback.status_flags,) = _struct_I2iId4I9dId3I.unpack(str[start:end])
      self.action_result.result.end_state.walk_feedback.step_queue_saturated = []
      for i in range(0, 4):
        val1 = atlas_msgs.msg.AtlasBehaviorStepData()
        _x = val1
        start = end
        end += 16
        (_x.step_index, _x.foot_index, _x.duration,) = _struct_2Id.unpack(str[start:end])
        _v19 = val1.pose
        _v20 = _v19.position
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v21 = _v19.orientation
        _x = _v21
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.swing_height,) = _struct_d.unpack(str[start:end])
        self.action_result.result.end_state.walk_feedback.step_queue_saturated.append(val1)
      _x = self
      start = end
      end += 60
      (_x.action_result.result.end_state.manipulate_feedback.status_flags, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_height, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_yaw, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_lat, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_pitch, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_roll, _x.action_result.result.end_state.manipulate_feedback.clamped.com_v0, _x.action_result.result.end_state.manipulate_feedback.clamped.com_v1,) = _struct_I7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_result.result.end_state.k_effort = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_result.result.success, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      self.action_result.result.success = bool(self.action_result.result.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.state.header.seq, _x.action_feedback.feedback.state.header.stamp.secs, _x.action_feedback.feedback.state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.state.error_code, _x.action_feedback.feedback.state.current_behavior, _x.action_feedback.feedback.state.desired_behavior,) = _struct_3i.unpack(str[start:end])
      start = end
      end += 240
      self.action_feedback.feedback.state.f_out = _struct_30d.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.action_feedback.feedback.state.pos_est.position.x, _x.action_feedback.feedback.state.pos_est.position.y, _x.action_feedback.feedback.state.pos_est.position.z, _x.action_feedback.feedback.state.pos_est.velocity.x, _x.action_feedback.feedback.state.pos_est.velocity.y, _x.action_feedback.feedback.state.pos_est.velocity.z,) = _struct_6d.unpack(str[start:end])
      self.action_feedback.feedback.state.foot_pos_est = []
      for i in range(0, 2):
        val1 = geometry_msgs.msg.Pose()
        _v22 = val1.position
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v23 = val1.orientation
        _x = _v23
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.action_feedback.feedback.state.foot_pos_est.append(val1)
      _x = self
      start = end
      end += 136
      (_x.action_feedback.feedback.state.behavior_feedback.status_flags, _x.action_feedback.feedback.state.behavior_feedback.trans_from_behavior_index, _x.action_feedback.feedback.state.behavior_feedback.trans_to_behavior_index, _x.action_feedback.feedback.state.step_feedback.status_flags, _x.action_feedback.feedback.state.step_feedback.t_step_rem, _x.action_feedback.feedback.state.step_feedback.current_step_index, _x.action_feedback.feedback.state.step_feedback.next_step_index_needed, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.step_index, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.foot_index, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.duration, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.position.x, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.position.y, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.position.z, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.x, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.y, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.z, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.w, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.swing_height, _x.action_feedback.feedback.state.stand_feedback.status_flags, _x.action_feedback.feedback.state.walk_feedback.t_step_rem, _x.action_feedback.feedback.state.walk_feedback.current_step_index, _x.action_feedback.feedback.state.walk_feedback.next_step_index_needed, _x.action_feedback.feedback.state.walk_feedback.status_flags,) = _struct_I2iId4I9dId3I.unpack(str[start:end])
      self.action_feedback.feedback.state.walk_feedback.step_queue_saturated = []
      for i in range(0, 4):
        val1 = atlas_msgs.msg.AtlasBehaviorStepData()
        _x = val1
        start = end
        end += 16
        (_x.step_index, _x.foot_index, _x.duration,) = _struct_2Id.unpack(str[start:end])
        _v24 = val1.pose
        _v25 = _v24.position
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v26 = _v24.orientation
        _x = _v26
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.swing_height,) = _struct_d.unpack(str[start:end])
        self.action_feedback.feedback.state.walk_feedback.step_queue_saturated.append(val1)
      _x = self
      start = end
      end += 60
      (_x.action_feedback.feedback.state.manipulate_feedback.status_flags, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_height, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_yaw, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_lat, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_pitch, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_roll, _x.action_feedback.feedback.state.manipulate_feedback.clamped.com_v0, _x.action_feedback.feedback.state.manipulate_feedback.clamped.com_v1,) = _struct_I7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_feedback.feedback.state.k_effort = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.goal.header.seq, _x.action_goal.goal.header.stamp.secs, _x.action_goal.goal.header.stamp.nsecs))
      _x = self.action_goal.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.action_goal.goal.behavior))
      length = len(self.action_goal.goal.steps)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.steps:
        _x = val1
        buff.write(_struct_2Id.pack(_x.step_index, _x.foot_index, _x.duration))
        _v27 = val1.pose
        _v28 = _v27.position
        _x = _v28
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v29 = _v27.orientation
        _x = _v29
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.swing_height))
      _x = self
      buff.write(_struct_2I9dBiB7dB.pack(_x.action_goal.goal.step_params.desired_step.step_index, _x.action_goal.goal.step_params.desired_step.foot_index, _x.action_goal.goal.step_params.desired_step.duration, _x.action_goal.goal.step_params.desired_step.pose.position.x, _x.action_goal.goal.step_params.desired_step.pose.position.y, _x.action_goal.goal.step_params.desired_step.pose.position.z, _x.action_goal.goal.step_params.desired_step.pose.orientation.x, _x.action_goal.goal.step_params.desired_step.pose.orientation.y, _x.action_goal.goal.step_params.desired_step.pose.orientation.z, _x.action_goal.goal.step_params.desired_step.pose.orientation.w, _x.action_goal.goal.step_params.desired_step.swing_height, _x.action_goal.goal.step_params.use_demo_walk, _x.action_goal.goal.stand_params.placeholder, _x.action_goal.goal.manipulate_params.use_desired, _x.action_goal.goal.manipulate_params.desired.pelvis_height, _x.action_goal.goal.manipulate_params.desired.pelvis_yaw, _x.action_goal.goal.manipulate_params.desired.pelvis_lat, _x.action_goal.goal.manipulate_params.desired.pelvis_pitch, _x.action_goal.goal.manipulate_params.desired.pelvis_roll, _x.action_goal.goal.manipulate_params.desired.com_v0, _x.action_goal.goal.manipulate_params.desired.com_v1, _x.action_goal.goal.manipulate_params.use_demo_mode))
      _x = self.action_goal.goal.k_effort
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_result.result.end_state.header.seq, _x.action_result.result.end_state.header.stamp.secs, _x.action_result.result.end_state.header.stamp.nsecs))
      _x = self.action_result.result.end_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i.pack(_x.action_result.result.end_state.error_code, _x.action_result.result.end_state.current_behavior, _x.action_result.result.end_state.desired_behavior))
      buff.write(self.action_result.result.end_state.f_out.tostring())
      _x = self
      buff.write(_struct_6d.pack(_x.action_result.result.end_state.pos_est.position.x, _x.action_result.result.end_state.pos_est.position.y, _x.action_result.result.end_state.pos_est.position.z, _x.action_result.result.end_state.pos_est.velocity.x, _x.action_result.result.end_state.pos_est.velocity.y, _x.action_result.result.end_state.pos_est.velocity.z))
      for val1 in self.action_result.result.end_state.foot_pos_est:
        _v30 = val1.position
        _x = _v30
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v31 = val1.orientation
        _x = _v31
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_struct_I2iId4I9dId3I.pack(_x.action_result.result.end_state.behavior_feedback.status_flags, _x.action_result.result.end_state.behavior_feedback.trans_from_behavior_index, _x.action_result.result.end_state.behavior_feedback.trans_to_behavior_index, _x.action_result.result.end_state.step_feedback.status_flags, _x.action_result.result.end_state.step_feedback.t_step_rem, _x.action_result.result.end_state.step_feedback.current_step_index, _x.action_result.result.end_state.step_feedback.next_step_index_needed, _x.action_result.result.end_state.step_feedback.desired_step_saturated.step_index, _x.action_result.result.end_state.step_feedback.desired_step_saturated.foot_index, _x.action_result.result.end_state.step_feedback.desired_step_saturated.duration, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.position.x, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.position.y, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.position.z, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.x, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.y, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.z, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.w, _x.action_result.result.end_state.step_feedback.desired_step_saturated.swing_height, _x.action_result.result.end_state.stand_feedback.status_flags, _x.action_result.result.end_state.walk_feedback.t_step_rem, _x.action_result.result.end_state.walk_feedback.current_step_index, _x.action_result.result.end_state.walk_feedback.next_step_index_needed, _x.action_result.result.end_state.walk_feedback.status_flags))
      for val1 in self.action_result.result.end_state.walk_feedback.step_queue_saturated:
        _x = val1
        buff.write(_struct_2Id.pack(_x.step_index, _x.foot_index, _x.duration))
        _v32 = val1.pose
        _v33 = _v32.position
        _x = _v33
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v34 = _v32.orientation
        _x = _v34
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.swing_height))
      _x = self
      buff.write(_struct_I7d.pack(_x.action_result.result.end_state.manipulate_feedback.status_flags, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_height, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_yaw, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_lat, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_pitch, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_roll, _x.action_result.result.end_state.manipulate_feedback.clamped.com_v0, _x.action_result.result.end_state.manipulate_feedback.clamped.com_v1))
      _x = self.action_result.result.end_state.k_effort
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_B3I.pack(_x.action_result.result.success, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.feedback.state.header.seq, _x.action_feedback.feedback.state.header.stamp.secs, _x.action_feedback.feedback.state.header.stamp.nsecs))
      _x = self.action_feedback.feedback.state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3i.pack(_x.action_feedback.feedback.state.error_code, _x.action_feedback.feedback.state.current_behavior, _x.action_feedback.feedback.state.desired_behavior))
      buff.write(self.action_feedback.feedback.state.f_out.tostring())
      _x = self
      buff.write(_struct_6d.pack(_x.action_feedback.feedback.state.pos_est.position.x, _x.action_feedback.feedback.state.pos_est.position.y, _x.action_feedback.feedback.state.pos_est.position.z, _x.action_feedback.feedback.state.pos_est.velocity.x, _x.action_feedback.feedback.state.pos_est.velocity.y, _x.action_feedback.feedback.state.pos_est.velocity.z))
      for val1 in self.action_feedback.feedback.state.foot_pos_est:
        _v35 = val1.position
        _x = _v35
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v36 = val1.orientation
        _x = _v36
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_struct_I2iId4I9dId3I.pack(_x.action_feedback.feedback.state.behavior_feedback.status_flags, _x.action_feedback.feedback.state.behavior_feedback.trans_from_behavior_index, _x.action_feedback.feedback.state.behavior_feedback.trans_to_behavior_index, _x.action_feedback.feedback.state.step_feedback.status_flags, _x.action_feedback.feedback.state.step_feedback.t_step_rem, _x.action_feedback.feedback.state.step_feedback.current_step_index, _x.action_feedback.feedback.state.step_feedback.next_step_index_needed, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.step_index, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.foot_index, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.duration, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.position.x, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.position.y, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.position.z, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.x, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.y, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.z, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.w, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.swing_height, _x.action_feedback.feedback.state.stand_feedback.status_flags, _x.action_feedback.feedback.state.walk_feedback.t_step_rem, _x.action_feedback.feedback.state.walk_feedback.current_step_index, _x.action_feedback.feedback.state.walk_feedback.next_step_index_needed, _x.action_feedback.feedback.state.walk_feedback.status_flags))
      for val1 in self.action_feedback.feedback.state.walk_feedback.step_queue_saturated:
        _x = val1
        buff.write(_struct_2Id.pack(_x.step_index, _x.foot_index, _x.duration))
        _v37 = val1.pose
        _v38 = _v37.position
        _x = _v38
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v39 = _v37.orientation
        _x = _v39
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.swing_height))
      _x = self
      buff.write(_struct_I7d.pack(_x.action_feedback.feedback.state.manipulate_feedback.status_flags, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_height, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_yaw, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_lat, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_pitch, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_roll, _x.action_feedback.feedback.state.manipulate_feedback.clamped.com_v0, _x.action_feedback.feedback.state.manipulate_feedback.clamped.com_v1))
      _x = self.action_feedback.feedback.state.k_effort
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = atlas_msgs.msg.WalkDemoActionGoal()
      if self.action_result is None:
        self.action_result = atlas_msgs.msg.WalkDemoActionResult()
      if self.action_feedback is None:
        self.action_feedback = atlas_msgs.msg.WalkDemoActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.header.seq, _x.action_goal.goal.header.stamp.secs, _x.action_goal.goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.action_goal.goal.behavior,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.steps = []
      for i in range(0, length):
        val1 = atlas_msgs.msg.AtlasBehaviorStepData()
        _x = val1
        start = end
        end += 16
        (_x.step_index, _x.foot_index, _x.duration,) = _struct_2Id.unpack(str[start:end])
        _v40 = val1.pose
        _v41 = _v40.position
        _x = _v41
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v42 = _v40.orientation
        _x = _v42
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.swing_height,) = _struct_d.unpack(str[start:end])
        self.action_goal.goal.steps.append(val1)
      _x = self
      start = end
      end += 143
      (_x.action_goal.goal.step_params.desired_step.step_index, _x.action_goal.goal.step_params.desired_step.foot_index, _x.action_goal.goal.step_params.desired_step.duration, _x.action_goal.goal.step_params.desired_step.pose.position.x, _x.action_goal.goal.step_params.desired_step.pose.position.y, _x.action_goal.goal.step_params.desired_step.pose.position.z, _x.action_goal.goal.step_params.desired_step.pose.orientation.x, _x.action_goal.goal.step_params.desired_step.pose.orientation.y, _x.action_goal.goal.step_params.desired_step.pose.orientation.z, _x.action_goal.goal.step_params.desired_step.pose.orientation.w, _x.action_goal.goal.step_params.desired_step.swing_height, _x.action_goal.goal.step_params.use_demo_walk, _x.action_goal.goal.stand_params.placeholder, _x.action_goal.goal.manipulate_params.use_desired, _x.action_goal.goal.manipulate_params.desired.pelvis_height, _x.action_goal.goal.manipulate_params.desired.pelvis_yaw, _x.action_goal.goal.manipulate_params.desired.pelvis_lat, _x.action_goal.goal.manipulate_params.desired.pelvis_pitch, _x.action_goal.goal.manipulate_params.desired.pelvis_roll, _x.action_goal.goal.manipulate_params.desired.com_v0, _x.action_goal.goal.manipulate_params.desired.com_v1, _x.action_goal.goal.manipulate_params.use_demo_mode,) = _struct_2I9dBiB7dB.unpack(str[start:end])
      self.action_goal.goal.step_params.use_demo_walk = bool(self.action_goal.goal.step_params.use_demo_walk)
      self.action_goal.goal.manipulate_params.use_desired = bool(self.action_goal.goal.manipulate_params.use_desired)
      self.action_goal.goal.manipulate_params.use_demo_mode = bool(self.action_goal.goal.manipulate_params.use_demo_mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_goal.goal.k_effort = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.end_state.header.seq, _x.action_result.result.end_state.header.stamp.secs, _x.action_result.result.end_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.end_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.end_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.end_state.error_code, _x.action_result.result.end_state.current_behavior, _x.action_result.result.end_state.desired_behavior,) = _struct_3i.unpack(str[start:end])
      start = end
      end += 240
      self.action_result.result.end_state.f_out = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=30)
      _x = self
      start = end
      end += 48
      (_x.action_result.result.end_state.pos_est.position.x, _x.action_result.result.end_state.pos_est.position.y, _x.action_result.result.end_state.pos_est.position.z, _x.action_result.result.end_state.pos_est.velocity.x, _x.action_result.result.end_state.pos_est.velocity.y, _x.action_result.result.end_state.pos_est.velocity.z,) = _struct_6d.unpack(str[start:end])
      self.action_result.result.end_state.foot_pos_est = []
      for i in range(0, 2):
        val1 = geometry_msgs.msg.Pose()
        _v43 = val1.position
        _x = _v43
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v44 = val1.orientation
        _x = _v44
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.action_result.result.end_state.foot_pos_est.append(val1)
      _x = self
      start = end
      end += 136
      (_x.action_result.result.end_state.behavior_feedback.status_flags, _x.action_result.result.end_state.behavior_feedback.trans_from_behavior_index, _x.action_result.result.end_state.behavior_feedback.trans_to_behavior_index, _x.action_result.result.end_state.step_feedback.status_flags, _x.action_result.result.end_state.step_feedback.t_step_rem, _x.action_result.result.end_state.step_feedback.current_step_index, _x.action_result.result.end_state.step_feedback.next_step_index_needed, _x.action_result.result.end_state.step_feedback.desired_step_saturated.step_index, _x.action_result.result.end_state.step_feedback.desired_step_saturated.foot_index, _x.action_result.result.end_state.step_feedback.desired_step_saturated.duration, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.position.x, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.position.y, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.position.z, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.x, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.y, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.z, _x.action_result.result.end_state.step_feedback.desired_step_saturated.pose.orientation.w, _x.action_result.result.end_state.step_feedback.desired_step_saturated.swing_height, _x.action_result.result.end_state.stand_feedback.status_flags, _x.action_result.result.end_state.walk_feedback.t_step_rem, _x.action_result.result.end_state.walk_feedback.current_step_index, _x.action_result.result.end_state.walk_feedback.next_step_index_needed, _x.action_result.result.end_state.walk_feedback.status_flags,) = _struct_I2iId4I9dId3I.unpack(str[start:end])
      self.action_result.result.end_state.walk_feedback.step_queue_saturated = []
      for i in range(0, 4):
        val1 = atlas_msgs.msg.AtlasBehaviorStepData()
        _x = val1
        start = end
        end += 16
        (_x.step_index, _x.foot_index, _x.duration,) = _struct_2Id.unpack(str[start:end])
        _v45 = val1.pose
        _v46 = _v45.position
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v47 = _v45.orientation
        _x = _v47
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.swing_height,) = _struct_d.unpack(str[start:end])
        self.action_result.result.end_state.walk_feedback.step_queue_saturated.append(val1)
      _x = self
      start = end
      end += 60
      (_x.action_result.result.end_state.manipulate_feedback.status_flags, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_height, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_yaw, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_lat, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_pitch, _x.action_result.result.end_state.manipulate_feedback.clamped.pelvis_roll, _x.action_result.result.end_state.manipulate_feedback.clamped.com_v0, _x.action_result.result.end_state.manipulate_feedback.clamped.com_v1,) = _struct_I7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_result.result.end_state.k_effort = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_result.result.success, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_B3I.unpack(str[start:end])
      self.action_result.result.success = bool(self.action_result.result.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.state.header.seq, _x.action_feedback.feedback.state.header.stamp.secs, _x.action_feedback.feedback.state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.state.error_code, _x.action_feedback.feedback.state.current_behavior, _x.action_feedback.feedback.state.desired_behavior,) = _struct_3i.unpack(str[start:end])
      start = end
      end += 240
      self.action_feedback.feedback.state.f_out = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=30)
      _x = self
      start = end
      end += 48
      (_x.action_feedback.feedback.state.pos_est.position.x, _x.action_feedback.feedback.state.pos_est.position.y, _x.action_feedback.feedback.state.pos_est.position.z, _x.action_feedback.feedback.state.pos_est.velocity.x, _x.action_feedback.feedback.state.pos_est.velocity.y, _x.action_feedback.feedback.state.pos_est.velocity.z,) = _struct_6d.unpack(str[start:end])
      self.action_feedback.feedback.state.foot_pos_est = []
      for i in range(0, 2):
        val1 = geometry_msgs.msg.Pose()
        _v48 = val1.position
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v49 = val1.orientation
        _x = _v49
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.action_feedback.feedback.state.foot_pos_est.append(val1)
      _x = self
      start = end
      end += 136
      (_x.action_feedback.feedback.state.behavior_feedback.status_flags, _x.action_feedback.feedback.state.behavior_feedback.trans_from_behavior_index, _x.action_feedback.feedback.state.behavior_feedback.trans_to_behavior_index, _x.action_feedback.feedback.state.step_feedback.status_flags, _x.action_feedback.feedback.state.step_feedback.t_step_rem, _x.action_feedback.feedback.state.step_feedback.current_step_index, _x.action_feedback.feedback.state.step_feedback.next_step_index_needed, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.step_index, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.foot_index, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.duration, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.position.x, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.position.y, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.position.z, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.x, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.y, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.z, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.pose.orientation.w, _x.action_feedback.feedback.state.step_feedback.desired_step_saturated.swing_height, _x.action_feedback.feedback.state.stand_feedback.status_flags, _x.action_feedback.feedback.state.walk_feedback.t_step_rem, _x.action_feedback.feedback.state.walk_feedback.current_step_index, _x.action_feedback.feedback.state.walk_feedback.next_step_index_needed, _x.action_feedback.feedback.state.walk_feedback.status_flags,) = _struct_I2iId4I9dId3I.unpack(str[start:end])
      self.action_feedback.feedback.state.walk_feedback.step_queue_saturated = []
      for i in range(0, 4):
        val1 = atlas_msgs.msg.AtlasBehaviorStepData()
        _x = val1
        start = end
        end += 16
        (_x.step_index, _x.foot_index, _x.duration,) = _struct_2Id.unpack(str[start:end])
        _v50 = val1.pose
        _v51 = _v50.position
        _x = _v51
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v52 = _v50.orientation
        _x = _v52
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.swing_height,) = _struct_d.unpack(str[start:end])
        self.action_feedback.feedback.state.walk_feedback.step_queue_saturated.append(val1)
      _x = self
      start = end
      end += 60
      (_x.action_feedback.feedback.state.manipulate_feedback.status_flags, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_height, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_yaw, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_lat, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_pitch, _x.action_feedback.feedback.state.manipulate_feedback.clamped.pelvis_roll, _x.action_feedback.feedback.state.manipulate_feedback.clamped.com_v0, _x.action_feedback.feedback.state.manipulate_feedback.clamped.com_v1,) = _struct_I7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_feedback.feedback.state.k_effort = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_6d = struct.Struct("<6d")
_struct_d = struct.Struct("<d")
_struct_i = struct.Struct("<i")
_struct_3i = struct.Struct("<3i")
_struct_I2iId4I9dId3I = struct.Struct("<I2iId4I9dId3I")
_struct_3I = struct.Struct("<3I")
_struct_I7d = struct.Struct("<I7d")
_struct_B3I = struct.Struct("<B3I")
_struct_2Id = struct.Struct("<2Id")
_struct_4d = struct.Struct("<4d")
_struct_30d = struct.Struct("<30d")
_struct_2I = struct.Struct("<2I")
_struct_2I9dBiB7dB = struct.Struct("<2I9dBiB7dB")
_struct_3d = struct.Struct("<3d")
