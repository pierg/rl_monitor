# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from handle_msgs/HandleControl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HandleControl(genpy.Message):
  _md5sum = "51263c7a12877ca47d938bd95093e77a"
  _type = "handle_msgs/HandleControl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Command to move the HANDLE hand
# 

# The different control types
uint8 VELOCITY = 1
uint8 POSITION = 2
uint8 CURRENT  = 3
uint8 VOLTAGE  = 4
uint8 ANGLE    = 5

# The control type for each motor.
int32[5] type

# The value to set.
int32[5] value

# Whether or not to control each motor.
bool[5] valid

# To be added if/when this becomes a service call:
#---
#bool ok
#string reason
"""
  # Pseudo-constants
  VELOCITY = 1
  POSITION = 2
  CURRENT = 3
  VOLTAGE = 4
  ANGLE = 5

  __slots__ = ['type','value','valid']
  _slot_types = ['int32[5]','int32[5]','bool[5]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,value,valid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HandleControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = [0,0,0,0,0]
      if self.value is None:
        self.value = [0,0,0,0,0]
      if self.valid is None:
        self.valid = [False,False,False,False,False]
    else:
      self.type = [0,0,0,0,0]
      self.value = [0,0,0,0,0]
      self.valid = [False,False,False,False,False]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_5i.pack(*self.type))
      buff.write(_struct_5i.pack(*self.value))
      buff.write(_struct_5B.pack(*self.valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 20
      self.type = _struct_5i.unpack(str[start:end])
      start = end
      end += 20
      self.value = _struct_5i.unpack(str[start:end])
      start = end
      end += 5
      self.valid = _struct_5B.unpack(str[start:end])
      self.valid = map(bool, self.valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.type.tostring())
      buff.write(self.value.tostring())
      buff.write(self.valid.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 20
      self.type = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=5)
      start = end
      end += 20
      self.value = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=5)
      start = end
      end += 5
      self.valid = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=5)
      self.valid = map(bool, self.valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5i = struct.Struct("<5i")
_struct_5B = struct.Struct("<5B")
