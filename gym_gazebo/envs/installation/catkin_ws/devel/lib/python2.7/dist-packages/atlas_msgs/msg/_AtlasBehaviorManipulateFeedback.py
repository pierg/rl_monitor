# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from atlas_msgs/AtlasBehaviorManipulateFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import atlas_msgs.msg

class AtlasBehaviorManipulateFeedback(genpy.Message):
  _md5sum = "b4f41aa2a4f2626090da8f54cf08b3c9"
  _type = "atlas_msgs/AtlasBehaviorManipulateFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# mirrored from AtlasControlTypes.h
uint32 status_flags    # use AtlasBeahviorManipulateFlags
atlas_msgs/AtlasBehaviorPelvisServoParams clamped

================================================================================
MSG: atlas_msgs/AtlasBehaviorPelvisServoParams
# mirrored from AtlasControlTypes.h

float64 pelvis_height
float64 pelvis_yaw

float64 pelvis_lat  # deprecated Atlas V3

float64 pelvis_pitch
float64 pelvis_roll
float64 com_v0
float64 com_v1"""
  __slots__ = ['status_flags','clamped']
  _slot_types = ['uint32','atlas_msgs/AtlasBehaviorPelvisServoParams']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status_flags,clamped

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AtlasBehaviorManipulateFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.status_flags is None:
        self.status_flags = 0
      if self.clamped is None:
        self.clamped = atlas_msgs.msg.AtlasBehaviorPelvisServoParams()
    else:
      self.status_flags = 0
      self.clamped = atlas_msgs.msg.AtlasBehaviorPelvisServoParams()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_I7d.pack(_x.status_flags, _x.clamped.pelvis_height, _x.clamped.pelvis_yaw, _x.clamped.pelvis_lat, _x.clamped.pelvis_pitch, _x.clamped.pelvis_roll, _x.clamped.com_v0, _x.clamped.com_v1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.clamped is None:
        self.clamped = atlas_msgs.msg.AtlasBehaviorPelvisServoParams()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.status_flags, _x.clamped.pelvis_height, _x.clamped.pelvis_yaw, _x.clamped.pelvis_lat, _x.clamped.pelvis_pitch, _x.clamped.pelvis_roll, _x.clamped.com_v0, _x.clamped.com_v1,) = _struct_I7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_I7d.pack(_x.status_flags, _x.clamped.pelvis_height, _x.clamped.pelvis_yaw, _x.clamped.pelvis_lat, _x.clamped.pelvis_pitch, _x.clamped.pelvis_roll, _x.clamped.com_v0, _x.clamped.com_v1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.clamped is None:
        self.clamped = atlas_msgs.msg.AtlasBehaviorPelvisServoParams()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.status_flags, _x.clamped.pelvis_height, _x.clamped.pelvis_yaw, _x.clamped.pelvis_lat, _x.clamped.pelvis_pitch, _x.clamped.pelvis_roll, _x.clamped.com_v0, _x.clamped.com_v1,) = _struct_I7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_I7d = struct.Struct("<I7d")
