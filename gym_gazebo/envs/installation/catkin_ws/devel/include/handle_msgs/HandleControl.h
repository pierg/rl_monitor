// Generated by gencpp from file handle_msgs/HandleControl.msg
// DO NOT EDIT!


#ifndef HANDLE_MSGS_MESSAGE_HANDLECONTROL_H
#define HANDLE_MSGS_MESSAGE_HANDLECONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace handle_msgs
{
template <class ContainerAllocator>
struct HandleControl_
{
  typedef HandleControl_<ContainerAllocator> Type;

  HandleControl_()
    : type()
    , value()
    , valid()  {
      type.assign(0);

      value.assign(0);

      valid.assign(false);
  }
  HandleControl_(const ContainerAllocator& _alloc)
    : type()
    , value()
    , valid()  {
  (void)_alloc;
      type.assign(0);

      value.assign(0);

      valid.assign(false);
  }



   typedef boost::array<int32_t, 5>  _type_type;
  _type_type type;

   typedef boost::array<int32_t, 5>  _value_type;
  _value_type value;

   typedef boost::array<uint8_t, 5>  _valid_type;
  _valid_type valid;


    enum { VELOCITY = 1u };
     enum { POSITION = 2u };
     enum { CURRENT = 3u };
     enum { VOLTAGE = 4u };
     enum { ANGLE = 5u };
 

  typedef boost::shared_ptr< ::handle_msgs::HandleControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handle_msgs::HandleControl_<ContainerAllocator> const> ConstPtr;

}; // struct HandleControl_

typedef ::handle_msgs::HandleControl_<std::allocator<void> > HandleControl;

typedef boost::shared_ptr< ::handle_msgs::HandleControl > HandleControlPtr;
typedef boost::shared_ptr< ::handle_msgs::HandleControl const> HandleControlConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handle_msgs::HandleControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handle_msgs::HandleControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace handle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'handle_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/handle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::handle_msgs::HandleControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handle_msgs::HandleControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handle_msgs::HandleControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handle_msgs::HandleControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handle_msgs::HandleControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handle_msgs::HandleControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handle_msgs::HandleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51263c7a12877ca47d938bd95093e77a";
  }

  static const char* value(const ::handle_msgs::HandleControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51263c7a12877ca4ULL;
  static const uint64_t static_value2 = 0x7d938bd95093e77aULL;
};

template<class ContainerAllocator>
struct DataType< ::handle_msgs::HandleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handle_msgs/HandleControl";
  }

  static const char* value(const ::handle_msgs::HandleControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handle_msgs::HandleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Command to move the HANDLE hand\n\
# \n\
\n\
# The different control types\n\
uint8 VELOCITY = 1\n\
uint8 POSITION = 2\n\
uint8 CURRENT  = 3\n\
uint8 VOLTAGE  = 4\n\
uint8 ANGLE    = 5\n\
\n\
# The control type for each motor.\n\
int32[5] type\n\
\n\
# The value to set.\n\
int32[5] value\n\
\n\
# Whether or not to control each motor.\n\
bool[5] valid\n\
\n\
# To be added if/when this becomes a service call:\n\
#---\n\
#bool ok\n\
#string reason\n\
";
  }

  static const char* value(const ::handle_msgs::HandleControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handle_msgs::HandleControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.value);
      stream.next(m.valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandleControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handle_msgs::HandleControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handle_msgs::HandleControl_<ContainerAllocator>& v)
  {
    s << indent << "type[]" << std::endl;
    for (size_t i = 0; i < v.type.size(); ++i)
    {
      s << indent << "  type[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.type[i]);
    }
    s << indent << "value[]" << std::endl;
    for (size_t i = 0; i < v.value.size(); ++i)
    {
      s << indent << "  value[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.value[i]);
    }
    s << indent << "valid[]" << std::endl;
    for (size_t i = 0; i < v.valid.size(); ++i)
    {
      s << indent << "  valid[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.valid[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDLE_MSGS_MESSAGE_HANDLECONTROL_H
