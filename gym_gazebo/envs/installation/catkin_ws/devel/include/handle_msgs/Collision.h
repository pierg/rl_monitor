// Generated by gencpp from file handle_msgs/Collision.msg
// DO NOT EDIT!


#ifndef HANDLE_MSGS_MESSAGE_COLLISION_H
#define HANDLE_MSGS_MESSAGE_COLLISION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace handle_msgs
{
template <class ContainerAllocator>
struct Collision_
{
  typedef Collision_<ContainerAllocator> Type;

  Collision_()
    : frame_id()
    , sensor_id(0)
    , intensity(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  Collision_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)
    , sensor_id(0)
    , intensity(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef int32_t _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef float _intensity_type;
  _intensity_type intensity;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;




  typedef boost::shared_ptr< ::handle_msgs::Collision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handle_msgs::Collision_<ContainerAllocator> const> ConstPtr;

}; // struct Collision_

typedef ::handle_msgs::Collision_<std::allocator<void> > Collision;

typedef boost::shared_ptr< ::handle_msgs::Collision > CollisionPtr;
typedef boost::shared_ptr< ::handle_msgs::Collision const> CollisionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handle_msgs::Collision_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handle_msgs::Collision_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace handle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'handle_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/handle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::handle_msgs::Collision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handle_msgs::Collision_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handle_msgs::Collision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handle_msgs::Collision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handle_msgs::Collision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handle_msgs::Collision_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handle_msgs::Collision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac44fce6d57e9e973d85368daf4a69ee";
  }

  static const char* value(const ::handle_msgs::Collision_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac44fce6d57e9e97ULL;
  static const uint64_t static_value2 = 0x3d85368daf4a69eeULL;
};

template<class ContainerAllocator>
struct DataType< ::handle_msgs::Collision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handle_msgs/Collision";
  }

  static const char* value(const ::handle_msgs::Collision_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handle_msgs::Collision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is basic collision message\n\
# it is used in HandleCollisions to build an array\n\
\n\
string frame_id\n\
# finger[0]/proximal_link\n\
# finger[0]/distal_link\n\
# finger[1]/proximal_link\n\
# finger[1]/distal_link\n\
# finger[2]/proximal_link\n\
# finger[2]/distal_link\n\
# base_link\n\
\n\
int32 sensor_id\n\
# index of sensor\n\
\n\
float32 intensity\n\
\n\
# location of sensor on the surface of the finger in the link frame\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::handle_msgs::Collision_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handle_msgs::Collision_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.sensor_id);
      stream.next(m.intensity);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Collision_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handle_msgs::Collision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handle_msgs::Collision_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "sensor_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "intensity: ";
    Printer<float>::stream(s, indent + "  ", v.intensity);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDLE_MSGS_MESSAGE_COLLISION_H
