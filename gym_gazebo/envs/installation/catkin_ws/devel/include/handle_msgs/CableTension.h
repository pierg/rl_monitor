// Generated by gencpp from file handle_msgs/CableTension.msg
// DO NOT EDIT!


#ifndef HANDLE_MSGS_MESSAGE_CABLETENSION_H
#define HANDLE_MSGS_MESSAGE_CABLETENSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace handle_msgs
{
template <class ContainerAllocator>
struct CableTension_
{
  typedef CableTension_<ContainerAllocator> Type;

  CableTension_()
    : sensor1(0.0)
    , sensor2(0.0)  {
    }
  CableTension_(const ContainerAllocator& _alloc)
    : sensor1(0.0)
    , sensor2(0.0)  {
  (void)_alloc;
    }



   typedef float _sensor1_type;
  _sensor1_type sensor1;

   typedef float _sensor2_type;
  _sensor2_type sensor2;




  typedef boost::shared_ptr< ::handle_msgs::CableTension_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handle_msgs::CableTension_<ContainerAllocator> const> ConstPtr;

}; // struct CableTension_

typedef ::handle_msgs::CableTension_<std::allocator<void> > CableTension;

typedef boost::shared_ptr< ::handle_msgs::CableTension > CableTensionPtr;
typedef boost::shared_ptr< ::handle_msgs::CableTension const> CableTensionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handle_msgs::CableTension_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handle_msgs::CableTension_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace handle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'handle_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/handle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::handle_msgs::CableTension_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handle_msgs::CableTension_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handle_msgs::CableTension_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handle_msgs::CableTension_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handle_msgs::CableTension_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handle_msgs::CableTension_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handle_msgs::CableTension_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1e553f0fafb9cb708d68c56bd44d521";
  }

  static const char* value(const ::handle_msgs::CableTension_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1e553f0fafb9cb7ULL;
  static const uint64_t static_value2 = 0x08d68c56bd44d521ULL;
};

template<class ContainerAllocator>
struct DataType< ::handle_msgs::CableTension_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handle_msgs/CableTension";
  }

  static const char* value(const ::handle_msgs::CableTension_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handle_msgs::CableTension_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The cable tension in one finger of the HANDLE hand.\n\
\n\
float32 sensor1\n\
float32 sensor2\n\
";
  }

  static const char* value(const ::handle_msgs::CableTension_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handle_msgs::CableTension_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor1);
      stream.next(m.sensor2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CableTension_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handle_msgs::CableTension_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handle_msgs::CableTension_<ContainerAllocator>& v)
  {
    s << indent << "sensor1: ";
    Printer<float>::stream(s, indent + "  ", v.sensor1);
    s << indent << "sensor2: ";
    Printer<float>::stream(s, indent + "  ", v.sensor2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDLE_MSGS_MESSAGE_CABLETENSION_H
