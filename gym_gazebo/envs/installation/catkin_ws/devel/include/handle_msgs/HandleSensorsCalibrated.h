// Generated by gencpp from file handle_msgs/HandleSensorsCalibrated.msg
// DO NOT EDIT!


#ifndef HANDLE_MSGS_MESSAGE_HANDLESENSORSCALIBRATED_H
#define HANDLE_MSGS_MESSAGE_HANDLESENSORSCALIBRATED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <handle_msgs/Finger.h>
#include <handle_msgs/Finger.h>

namespace handle_msgs
{
template <class ContainerAllocator>
struct HandleSensorsCalibrated_
{
  typedef HandleSensorsCalibrated_<ContainerAllocator> Type;

  HandleSensorsCalibrated_()
    : header()
    , fingerTactile()
    , palmTactile()
    , fingerSpread(0.0)
    , proximalJointAngle()
    , distalJointAngle()  {
      palmTactile.assign(0.0);

      proximalJointAngle.assign(0.0);
  }
  HandleSensorsCalibrated_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fingerTactile()
    , palmTactile()
    , fingerSpread(0.0)
    , proximalJointAngle()
    , distalJointAngle()  {
  (void)_alloc;
      fingerTactile.assign( ::handle_msgs::Finger_<ContainerAllocator> (_alloc));

      palmTactile.assign(0.0);

      proximalJointAngle.assign(0.0);

      distalJointAngle.assign( ::handle_msgs::Finger_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array< ::handle_msgs::Finger_<ContainerAllocator> , 3>  _fingerTactile_type;
  _fingerTactile_type fingerTactile;

   typedef boost::array<float, 48>  _palmTactile_type;
  _palmTactile_type palmTactile;

   typedef float _fingerSpread_type;
  _fingerSpread_type fingerSpread;

   typedef boost::array<float, 3>  _proximalJointAngle_type;
  _proximalJointAngle_type proximalJointAngle;

   typedef boost::array< ::handle_msgs::Finger_<ContainerAllocator> , 3>  _distalJointAngle_type;
  _distalJointAngle_type distalJointAngle;




  typedef boost::shared_ptr< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> const> ConstPtr;

}; // struct HandleSensorsCalibrated_

typedef ::handle_msgs::HandleSensorsCalibrated_<std::allocator<void> > HandleSensorsCalibrated;

typedef boost::shared_ptr< ::handle_msgs::HandleSensorsCalibrated > HandleSensorsCalibratedPtr;
typedef boost::shared_ptr< ::handle_msgs::HandleSensorsCalibrated const> HandleSensorsCalibratedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace handle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'handle_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/handle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54133cdcf259bf3a4416674ef7b62161";
  }

  static const char* value(const ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54133cdcf259bf3aULL;
  static const uint64_t static_value2 = 0x4416674ef7b62161ULL;
};

template<class ContainerAllocator>
struct DataType< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handle_msgs/HandleSensorsCalibrated";
  }

  static const char* value(const ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is sensors of the HANDLE hand after calibration and data manipulation\n\
# published from the package sensors, by the sensors_publisher\n\
\n\
# not all the sensors were included, but only the one which were addressed at the moment\n\
\n\
# Currently only used for time stamp.  \n\
Header header\n\
\n\
# The tactile array for each finger.  In units of kPa.\n\
# [F1, F2, F3]\n\
# Note there are 12 proximal and 10 distal sensors.\n\
Finger[3] fingerTactile\n\
\n\
# The tactile array for the palm.  In units of kPa.\n\
float32[48] palmTactile\n\
\n\
# The encoder on the F1 / F2 rotation.\n\
# Approx. 768 ticks to rotate the fingers 90 degrees.\n\
float32 fingerSpread\n\
\n\
# The proximal joint angle. Angle in radians\n\
# [F1, F2, F3]\n\
float32[3] proximalJointAngle\n\
\n\
# The finger distal joint flexture angle\n\
# [F1, F2, F3]\n\
# Note there are 4 readings on either side of the joint.\n\
Finger[3] distalJointAngle\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: handle_msgs/Finger\n\
# This finger definition is used for different sensors in the HandleSensors \n\
# message type.  \n\
\n\
float32[] proximal\n\
float32[] distal\n\
\n\
";
  }

  static const char* value(const ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fingerTactile);
      stream.next(m.palmTactile);
      stream.next(m.fingerSpread);
      stream.next(m.proximalJointAngle);
      stream.next(m.distalJointAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandleSensorsCalibrated_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handle_msgs::HandleSensorsCalibrated_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fingerTactile[]" << std::endl;
    for (size_t i = 0; i < v.fingerTactile.size(); ++i)
    {
      s << indent << "  fingerTactile[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::handle_msgs::Finger_<ContainerAllocator> >::stream(s, indent + "    ", v.fingerTactile[i]);
    }
    s << indent << "palmTactile[]" << std::endl;
    for (size_t i = 0; i < v.palmTactile.size(); ++i)
    {
      s << indent << "  palmTactile[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.palmTactile[i]);
    }
    s << indent << "fingerSpread: ";
    Printer<float>::stream(s, indent + "  ", v.fingerSpread);
    s << indent << "proximalJointAngle[]" << std::endl;
    for (size_t i = 0; i < v.proximalJointAngle.size(); ++i)
    {
      s << indent << "  proximalJointAngle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.proximalJointAngle[i]);
    }
    s << indent << "distalJointAngle[]" << std::endl;
    for (size_t i = 0; i < v.distalJointAngle.size(); ++i)
    {
      s << indent << "  distalJointAngle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::handle_msgs::Finger_<ContainerAllocator> >::stream(s, indent + "    ", v.distalJointAngle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDLE_MSGS_MESSAGE_HANDLESENSORSCALIBRATED_H
