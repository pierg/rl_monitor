// Generated by gencpp from file handle_msgs/HandleSensors.msg
// DO NOT EDIT!


#ifndef HANDLE_MSGS_MESSAGE_HANDLESENSORS_H
#define HANDLE_MSGS_MESSAGE_HANDLESENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <handle_msgs/Finger.h>
#include <handle_msgs/Finger.h>
#include <handle_msgs/Finger.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace handle_msgs
{
template <class ContainerAllocator>
struct HandleSensors_
{
  typedef HandleSensors_<ContainerAllocator> Type;

  HandleSensors_()
    : header()
    , motorHallEncoder()
    , motorWindingTemp()
    , airTemp(0.0)
    , motorVelocity()
    , motorHousingTemp()
    , motorCurrent()
    , fingerTactile()
    , fingerTactileTemp()
    , palmTactile()
    , palmTactileTemp()
    , fingerSpread(0)
    , proximalJointAngle()
    , distalJointAngle()
    , proximalAcceleration()
    , distalAcceleration()
    , responses()
    , responseHistory()
    , motorError()  {
      motorHallEncoder.assign(0);

      motorWindingTemp.assign(0.0);

      motorVelocity.assign(0);

      motorHousingTemp.assign(0.0);

      motorCurrent.assign(0.0);

      palmTactile.assign(0.0);

      palmTactileTemp.assign(0.0);

      proximalJointAngle.assign(0);

      responses.assign(false);

      responseHistory.assign(0);

      motorError.assign(0);
  }
  HandleSensors_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , motorHallEncoder()
    , motorWindingTemp()
    , airTemp(0.0)
    , motorVelocity()
    , motorHousingTemp()
    , motorCurrent()
    , fingerTactile()
    , fingerTactileTemp()
    , palmTactile()
    , palmTactileTemp()
    , fingerSpread(0)
    , proximalJointAngle()
    , distalJointAngle()
    , proximalAcceleration()
    , distalAcceleration()
    , responses()
    , responseHistory()
    , motorError()  {
  (void)_alloc;
      motorHallEncoder.assign(0);

      motorWindingTemp.assign(0.0);

      motorVelocity.assign(0);

      motorHousingTemp.assign(0.0);

      motorCurrent.assign(0.0);

      fingerTactile.assign( ::handle_msgs::Finger_<ContainerAllocator> (_alloc));

      fingerTactileTemp.assign( ::handle_msgs::Finger_<ContainerAllocator> (_alloc));

      palmTactile.assign(0.0);

      palmTactileTemp.assign(0.0);

      proximalJointAngle.assign(0);

      distalJointAngle.assign( ::handle_msgs::Finger_<ContainerAllocator> (_alloc));

      proximalAcceleration.assign( ::geometry_msgs::Vector3_<ContainerAllocator> (_alloc));

      distalAcceleration.assign( ::geometry_msgs::Vector3_<ContainerAllocator> (_alloc));

      responses.assign(false);

      responseHistory.assign(0);

      motorError.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<int32_t, 4>  _motorHallEncoder_type;
  _motorHallEncoder_type motorHallEncoder;

   typedef boost::array<float, 4>  _motorWindingTemp_type;
  _motorWindingTemp_type motorWindingTemp;

   typedef float _airTemp_type;
  _airTemp_type airTemp;

   typedef boost::array<int32_t, 4>  _motorVelocity_type;
  _motorVelocity_type motorVelocity;

   typedef boost::array<float, 5>  _motorHousingTemp_type;
  _motorHousingTemp_type motorHousingTemp;

   typedef boost::array<float, 5>  _motorCurrent_type;
  _motorCurrent_type motorCurrent;

   typedef boost::array< ::handle_msgs::Finger_<ContainerAllocator> , 3>  _fingerTactile_type;
  _fingerTactile_type fingerTactile;

   typedef boost::array< ::handle_msgs::Finger_<ContainerAllocator> , 3>  _fingerTactileTemp_type;
  _fingerTactileTemp_type fingerTactileTemp;

   typedef boost::array<float, 48>  _palmTactile_type;
  _palmTactile_type palmTactile;

   typedef boost::array<float, 48>  _palmTactileTemp_type;
  _palmTactileTemp_type palmTactileTemp;

   typedef int32_t _fingerSpread_type;
  _fingerSpread_type fingerSpread;

   typedef boost::array<int32_t, 3>  _proximalJointAngle_type;
  _proximalJointAngle_type proximalJointAngle;

   typedef boost::array< ::handle_msgs::Finger_<ContainerAllocator> , 3>  _distalJointAngle_type;
  _distalJointAngle_type distalJointAngle;

   typedef boost::array< ::geometry_msgs::Vector3_<ContainerAllocator> , 3>  _proximalAcceleration_type;
  _proximalAcceleration_type proximalAcceleration;

   typedef boost::array< ::geometry_msgs::Vector3_<ContainerAllocator> , 3>  _distalAcceleration_type;
  _distalAcceleration_type distalAcceleration;

   typedef boost::array<uint8_t, 12>  _responses_type;
  _responses_type responses;

   typedef boost::array<int8_t, 12>  _responseHistory_type;
  _responseHistory_type responseHistory;

   typedef boost::array<int16_t, 5>  _motorError_type;
  _motorError_type motorError;




  typedef boost::shared_ptr< ::handle_msgs::HandleSensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handle_msgs::HandleSensors_<ContainerAllocator> const> ConstPtr;

}; // struct HandleSensors_

typedef ::handle_msgs::HandleSensors_<std::allocator<void> > HandleSensors;

typedef boost::shared_ptr< ::handle_msgs::HandleSensors > HandleSensorsPtr;
typedef boost::shared_ptr< ::handle_msgs::HandleSensors const> HandleSensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::handle_msgs::HandleSensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::handle_msgs::HandleSensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace handle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'handle_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/handle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::handle_msgs::HandleSensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::handle_msgs::HandleSensors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handle_msgs::HandleSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::handle_msgs::HandleSensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handle_msgs::HandleSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::handle_msgs::HandleSensors_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::handle_msgs::HandleSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41aa19d900cfb7233222088d703520cf";
  }

  static const char* value(const ::handle_msgs::HandleSensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41aa19d900cfb723ULL;
  static const uint64_t static_value2 = 0x3222088d703520cfULL;
};

template<class ContainerAllocator>
struct DataType< ::handle_msgs::HandleSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "handle_msgs/HandleSensors";
  }

  static const char* value(const ::handle_msgs::HandleSensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::handle_msgs::HandleSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# All of the sensors on the HANDLE hand.\n\
#\n\
# NOTE: In general, the order of the arrays is: [F1, F2, F3, F3 Ant., Spread].\n\
# Where: F1 is analogous to your right hand index finger, F2 is analogous to \n\
# your right middle finger, F3 is analogous to your right thumb, F3 Ant. is \n\
# the antagonistic motor for F3, and Spread is the motor which controls the \n\
# rotation of F1 and F2.\n\
#\n\
\n\
# Currently only used for time stamp.  Time stamp set from Overo's clock.\n\
# Not guaranteed to be in sync with the current time.\n\
Header header\n\
\n\
# The hall effect sensor on the finger motors.  \n\
# 24 counts per motor revolution x 300 motor revolutions for one full spindle\n\
# rotation.  \n\
# 3500 to put finger at approx. 90 degrees\n\
# 6000 to close finger gently\n\
# 7000 to close finger tightly\n\
#\n\
# [F1, F2, F3, F3 Ant.]\n\
int32[4] motorHallEncoder\n\
\n\
# The temperature of the finger motor windings, in Celsius.\n\
#\n\
# [F1, F2, F3, F3 Ant.]\n\
float32[4] motorWindingTemp\n\
\n\
# The air temperature as measured inside the housing, in Celsius.\n\
float32 airTemp\n\
\n\
# The motor velocity in RPM.  (Hall encoder ticks per minute)\n\
#\n\
# [F1, F2, F3, F3 Ant.]\n\
int32[4] motorVelocity\n\
\n\
# The temperature of the motor housing, in Celsius.\n\
# Note that the housing temp for the Spread motor is not populated, so will\n\
# not have a logical value.\n\
#\n\
# [F1, F2, F3, F3 Ant., Spread]\n\
float32[5] motorHousingTemp\n\
\n\
# The motor current in amps.\n\
#\n\
# [F1, F2, F3, F3 Ant., Spread]\n\
float32[5] motorCurrent\n\
\n\
# The tactile array for each finger.  In units of ADC counts.\n\
# Note there are 12 proximal and 10 distal sensors.\n\
#\n\
# [F1, F2, F3]\n\
Finger[3] fingerTactile\n\
\n\
# The tactile temperature array for each finger, in Celsius.\n\
# Note there are 12 proximal and 10 distal sensors.\n\
#\n\
# [F1, F2, F3]\n\
Finger[3] fingerTactileTemp\n\
\n\
# The tactile array for the palm.  In units of ADC counts.\n\
float32[48] palmTactile\n\
\n\
# The tactile temperature array for the palm, in Celsius.\n\
float32[48] palmTactileTemp\n\
\n\
# The encoder on the F1 / F2 rotation. 8.533 ticks per degree.\n\
# 3072 ticks per 180 degree rotation. (not possible).\n\
# 768 ticks to rotate the fingers 90 degrees for a \"T\" grasp.\n\
# 512 ticks to rotate the fingers 60 degrees for a spherical grasp.\n\
int32 fingerSpread\n\
\n\
# The proximal joint angle.  Approx 2.84 ticks per degree.\n\
# 1024 ticks per full revolution. (not possible)\n\
# 256 ticks to put finger at approx. 90 degrees\n\
# 435 ticks to close finger gently\n\
# 445 ticks to close finger tightly\n\
#\n\
# [F1, F2, F3]\n\
int32[3] proximalJointAngle\n\
\n\
# The finger distal joint flexture angle\n\
# [F1, F2, F3]\n\
# Note there are 4 readings on either side of the joint.\n\
Finger[3] distalJointAngle\n\
\n\
# The accelerometer in the proximal link of each finger.  In G's.\n\
# This sensor is not populated at this time.\n\
#\n\
# [F1, F2, F3]\n\
geometry_msgs/Vector3[3] proximalAcceleration\n\
\n\
# The accelerometer in the distal link of each finger.  In G's.\n\
# Z axis points out the back of the finger.\n\
# Y axis points out the finger tip.\n\
# X axis points to the left when looking at the finger pad.\n\
#\n\
# [F1, F2, F3]\n\
geometry_msgs/Vector3[3] distalAcceleration\n\
\n\
# In this sensor message, which devices actually contributed data.\n\
# The order of the array is:\n\
#  0: Palm (Traffic Cop)\n\
#  1: Finger 1 Proximal\n\
#  2: Finger 1 Distal\n\
#  3: Finger 2 Proximal\n\
#  4: Finger 2 Distal\n\
#  5: Finger 3 Proximal\n\
#  6: Finger 3 Distal\n\
#  7: Motor for Finger 1\n\
#  8: Motor for Finger 2\n\
#  9: Motor for Finger 3\n\
# 10: Motor for Finger 3 Antagonist\n\
# 11: Tactile Palm\n\
bool[12] responses\n\
\n\
# How many of the the last 100 messages had data from each device.\n\
# This gives a good indication of communication quality between the devices.\n\
# Note that this only counts sensor message history.  If you have a motor that\n\
# is in thermal shutdown and non-responsive, the device may look fine here.\n\
# However there will be errors in the motorError array below.\n\
# The order of the array is:\n\
#  0: Palm (Traffic Cop)\n\
#  1: Finger 1 Proximal\n\
#  2: Finger 1 Distal\n\
#  3: Finger 2 Proximal\n\
#  4: Finger 2 Distal\n\
#  5: Finger 3 Proximal\n\
#  6: Finger 3 Distal\n\
#  7: Motor for Finger 1\n\
#  8: Motor for Finger 2\n\
#  9: Motor for Finger 3\n\
# 10: Motor for Finger 3 Antagonist\n\
# 11: Tactile Palm\n\
int8[12] responseHistory\n\
\n\
# The last received error from each motor.\n\
# The order of the motors in the array:\n\
# [F1, F2, F3, F3 Ant., Spread]\n\
# The error codes are:\n\
#   0 = No Error\n\
#   1 = Traffic Cop checksum error\n\
#   2 = Unknown Command\n\
#   3 = Bad Address\n\
#   4 = Traffic Cop timeout waiting for response\n\
#  17 = Overo checksum error\n\
#  18 = Overo data length error\n\
#  20 = Overo timout waiting for response\n\
# 128 = Thermal Protection Delay\n\
# 129 = Mandatory Cool Down \n\
# 130 = Request out of range\n\
int16[5] motorError\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: handle_msgs/Finger\n\
# This finger definition is used for different sensors in the HandleSensors \n\
# message type.  \n\
\n\
float32[] proximal\n\
float32[] distal\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::handle_msgs::HandleSensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::handle_msgs::HandleSensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.motorHallEncoder);
      stream.next(m.motorWindingTemp);
      stream.next(m.airTemp);
      stream.next(m.motorVelocity);
      stream.next(m.motorHousingTemp);
      stream.next(m.motorCurrent);
      stream.next(m.fingerTactile);
      stream.next(m.fingerTactileTemp);
      stream.next(m.palmTactile);
      stream.next(m.palmTactileTemp);
      stream.next(m.fingerSpread);
      stream.next(m.proximalJointAngle);
      stream.next(m.distalJointAngle);
      stream.next(m.proximalAcceleration);
      stream.next(m.distalAcceleration);
      stream.next(m.responses);
      stream.next(m.responseHistory);
      stream.next(m.motorError);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HandleSensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handle_msgs::HandleSensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::handle_msgs::HandleSensors_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "motorHallEncoder[]" << std::endl;
    for (size_t i = 0; i < v.motorHallEncoder.size(); ++i)
    {
      s << indent << "  motorHallEncoder[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motorHallEncoder[i]);
    }
    s << indent << "motorWindingTemp[]" << std::endl;
    for (size_t i = 0; i < v.motorWindingTemp.size(); ++i)
    {
      s << indent << "  motorWindingTemp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.motorWindingTemp[i]);
    }
    s << indent << "airTemp: ";
    Printer<float>::stream(s, indent + "  ", v.airTemp);
    s << indent << "motorVelocity[]" << std::endl;
    for (size_t i = 0; i < v.motorVelocity.size(); ++i)
    {
      s << indent << "  motorVelocity[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motorVelocity[i]);
    }
    s << indent << "motorHousingTemp[]" << std::endl;
    for (size_t i = 0; i < v.motorHousingTemp.size(); ++i)
    {
      s << indent << "  motorHousingTemp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.motorHousingTemp[i]);
    }
    s << indent << "motorCurrent[]" << std::endl;
    for (size_t i = 0; i < v.motorCurrent.size(); ++i)
    {
      s << indent << "  motorCurrent[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.motorCurrent[i]);
    }
    s << indent << "fingerTactile[]" << std::endl;
    for (size_t i = 0; i < v.fingerTactile.size(); ++i)
    {
      s << indent << "  fingerTactile[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::handle_msgs::Finger_<ContainerAllocator> >::stream(s, indent + "    ", v.fingerTactile[i]);
    }
    s << indent << "fingerTactileTemp[]" << std::endl;
    for (size_t i = 0; i < v.fingerTactileTemp.size(); ++i)
    {
      s << indent << "  fingerTactileTemp[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::handle_msgs::Finger_<ContainerAllocator> >::stream(s, indent + "    ", v.fingerTactileTemp[i]);
    }
    s << indent << "palmTactile[]" << std::endl;
    for (size_t i = 0; i < v.palmTactile.size(); ++i)
    {
      s << indent << "  palmTactile[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.palmTactile[i]);
    }
    s << indent << "palmTactileTemp[]" << std::endl;
    for (size_t i = 0; i < v.palmTactileTemp.size(); ++i)
    {
      s << indent << "  palmTactileTemp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.palmTactileTemp[i]);
    }
    s << indent << "fingerSpread: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fingerSpread);
    s << indent << "proximalJointAngle[]" << std::endl;
    for (size_t i = 0; i < v.proximalJointAngle.size(); ++i)
    {
      s << indent << "  proximalJointAngle[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.proximalJointAngle[i]);
    }
    s << indent << "distalJointAngle[]" << std::endl;
    for (size_t i = 0; i < v.distalJointAngle.size(); ++i)
    {
      s << indent << "  distalJointAngle[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::handle_msgs::Finger_<ContainerAllocator> >::stream(s, indent + "    ", v.distalJointAngle[i]);
    }
    s << indent << "proximalAcceleration[]" << std::endl;
    for (size_t i = 0; i < v.proximalAcceleration.size(); ++i)
    {
      s << indent << "  proximalAcceleration[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.proximalAcceleration[i]);
    }
    s << indent << "distalAcceleration[]" << std::endl;
    for (size_t i = 0; i < v.distalAcceleration.size(); ++i)
    {
      s << indent << "  distalAcceleration[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.distalAcceleration[i]);
    }
    s << indent << "responses[]" << std::endl;
    for (size_t i = 0; i < v.responses.size(); ++i)
    {
      s << indent << "  responses[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.responses[i]);
    }
    s << indent << "responseHistory[]" << std::endl;
    for (size_t i = 0; i < v.responseHistory.size(); ++i)
    {
      s << indent << "  responseHistory[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.responseHistory[i]);
    }
    s << indent << "motorError[]" << std::endl;
    for (size_t i = 0; i < v.motorError.size(); ++i)
    {
      s << indent << "  motorError[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.motorError[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HANDLE_MSGS_MESSAGE_HANDLESENSORS_H
