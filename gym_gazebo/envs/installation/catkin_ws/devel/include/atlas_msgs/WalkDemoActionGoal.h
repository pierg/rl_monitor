// Generated by gencpp from file atlas_msgs/WalkDemoActionGoal.msg
// DO NOT EDIT!


#ifndef ATLAS_MSGS_MESSAGE_WALKDEMOACTIONGOAL_H
#define ATLAS_MSGS_MESSAGE_WALKDEMOACTIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <actionlib_msgs/GoalID.h>
#include <atlas_msgs/WalkDemoGoal.h>

namespace atlas_msgs
{
template <class ContainerAllocator>
struct WalkDemoActionGoal_
{
  typedef WalkDemoActionGoal_<ContainerAllocator> Type;

  WalkDemoActionGoal_()
    : header()
    , goal_id()
    , goal()  {
    }
  WalkDemoActionGoal_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal_id(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::actionlib_msgs::GoalID_<ContainerAllocator>  _goal_id_type;
  _goal_id_type goal_id;

   typedef  ::atlas_msgs::WalkDemoGoal_<ContainerAllocator>  _goal_type;
  _goal_type goal;




  typedef boost::shared_ptr< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct WalkDemoActionGoal_

typedef ::atlas_msgs::WalkDemoActionGoal_<std::allocator<void> > WalkDemoActionGoal;

typedef boost::shared_ptr< ::atlas_msgs::WalkDemoActionGoal > WalkDemoActionGoalPtr;
typedef boost::shared_ptr< ::atlas_msgs::WalkDemoActionGoal const> WalkDemoActionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'atlas_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/atlas_msgs/msg', '/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/devel/share/atlas_msgs/msg'], 'sandia_hand_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/sandia-hand/ros/sandia_hand_msgs/msg'], 'osrf_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/osrf-common/osrf_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'control_msgs': ['/opt/ros/indigo/share/control_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f6fb742683e55f90719c3e3768e581e";
  }

  static const char* value(const ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f6fb742683e55f9ULL;
  static const uint64_t static_value2 = 0x0719c3e3768e581eULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atlas_msgs/WalkDemoActionGoal";
  }

  static const char* value(const ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalID goal_id\n\
WalkDemoGoal goal\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalID\n\
# The stamp should store the time at which this goal was requested.\n\
# It is used by an action server when it tries to preempt all\n\
# goals that were requested before a certain time\n\
time stamp\n\
\n\
# The id provides a way to associate feedback and\n\
# result message with specific goal requests. The id\n\
# specified must be unique.\n\
string id\n\
\n\
\n\
================================================================================\n\
MSG: atlas_msgs/WalkDemoGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Goal\n\
# For Setting MultiStep Walking Commands\n\
Header header\n\
\n\
# permissible values for behavior\n\
int32 STAND             =  0 # stand\n\
int32 USER              =  1 # disable AtlasSimInterface updates, rely on\n\
                             # /atlas/atlas_command or /atlas/joint_commands\n\
int32 FREEZE            =  2 # safety mode\n\
int32 STAND_PREP        =  3 # stand-prep (AtlasSimInterface documentation)\n\
int32 WALK              =  4 # multi-step walk\n\
int32 STEP              =  5 # single step walk\n\
int32 MANIPULATE        =  6 # stand and allows manipulation.\n\
\n\
int32 behavior                # can be one of\n\
                              # USER, FREEZE, STAND_PREP\n\
                              # WALK, STEP, STAND, MANIPULATE\n\
                              # DEMO1, DEMO2\n\
\n\
# multi_step walking trajectory parameters\n\
atlas_msgs/AtlasBehaviorStepData[] steps\n\
\n\
# parameters for single_step behavior\n\
atlas_msgs/AtlasBehaviorStepParams step_params\n\
\n\
# parameters for standing behavior\n\
atlas_msgs/AtlasBehaviorStandParams stand_params\n\
\n\
# parameters for stand and manipulate\n\
atlas_msgs/AtlasBehaviorManipulateParams manipulate_params\n\
\n\
# same k_effort as AtlasCommand\n\
uint8[] k_effort       # k_effort can be an unsigned int 8value from 0 to 255, \n\
                       # at run time, a double between 0 and 1 is obtained\n\
                       # by dividing by 255.0d.\n\
\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorStepData\n\
# multi_step walking trajectory parameters\n\
uint32 step_index              # Step index, matlab style, starting from 1,\n\
                               # monotonically increasing during walking\n\
                               #  resets to 1 if robot leaves walk behaviors\n\
uint32 foot_index              # Foot_index can be LEFT_FOOT or RIGHT_FOOT\n\
float64 duration               # Step duration, when in doubt, 0.63s is a\n\
                               # good guess.\n\
geometry_msgs/Pose pose        # Foot pose in Atlas world frame\n\
float64 swing_height           # Step apex swing height measured form the\n\
                               # midpoint between the feet.\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorStepParams\n\
# parameters for single_step behavior\n\
atlas_msgs/AtlasBehaviorStepData desired_step\n\
bool use_demo_walk\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorStandParams\n\
# stand parameters\n\
int32 placeholder\n\
# etc., more to come\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorManipulateParams\n\
# mirrored from AtlasControlTypes.h\n\
bool use_desired\n\
atlas_msgs/AtlasBehaviorPelvisServoParams desired\n\
bool use_demo_mode\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorPelvisServoParams\n\
# mirrored from AtlasControlTypes.h\n\
\n\
float64 pelvis_height\n\
float64 pelvis_yaw\n\
\n\
float64 pelvis_lat  # deprecated Atlas V3\n\
\n\
float64 pelvis_pitch\n\
float64 pelvis_roll\n\
float64 com_v0\n\
float64 com_v1\n\
";
  }

  static const char* value(const ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal_id);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WalkDemoActionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atlas_msgs::WalkDemoActionGoal_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_id: ";
    s << std::endl;
    Printer< ::actionlib_msgs::GoalID_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_id);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::atlas_msgs::WalkDemoGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_WALKDEMOACTIONGOAL_H
