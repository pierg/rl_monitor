// Generated by gencpp from file atlas_msgs/VRCScore.msg
// DO NOT EDIT!


#ifndef ATLAS_MSGS_MESSAGE_VRCSCORE_H
#define ATLAS_MSGS_MESSAGE_VRCSCORE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace atlas_msgs
{
template <class ContainerAllocator>
struct VRCScore_
{
  typedef VRCScore_<ContainerAllocator> Type;

  VRCScore_()
    : wall_time()
    , sim_time()
    , wall_time_elapsed()
    , sim_time_elapsed()
    , completion_score(0)
    , falls(0)
    , message()
    , task_type(0)  {
    }
  VRCScore_(const ContainerAllocator& _alloc)
    : wall_time()
    , sim_time()
    , wall_time_elapsed()
    , sim_time_elapsed()
    , completion_score(0)
    , falls(0)
    , message(_alloc)
    , task_type(0)  {
  (void)_alloc;
    }



   typedef ros::Time _wall_time_type;
  _wall_time_type wall_time;

   typedef ros::Time _sim_time_type;
  _sim_time_type sim_time;

   typedef ros::Time _wall_time_elapsed_type;
  _wall_time_elapsed_type wall_time_elapsed;

   typedef ros::Time _sim_time_elapsed_type;
  _sim_time_elapsed_type sim_time_elapsed;

   typedef int32_t _completion_score_type;
  _completion_score_type completion_score;

   typedef int32_t _falls_type;
  _falls_type falls;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef uint32_t _task_type_type;
  _task_type_type task_type;


    enum { TASK_OTHER = 0u };
     enum { TASK_DRIVING = 1u };
     enum { TASK_WALKING = 2u };
     enum { TASK_MANIPULATION = 3u };
 

  typedef boost::shared_ptr< ::atlas_msgs::VRCScore_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::VRCScore_<ContainerAllocator> const> ConstPtr;

}; // struct VRCScore_

typedef ::atlas_msgs::VRCScore_<std::allocator<void> > VRCScore;

typedef boost::shared_ptr< ::atlas_msgs::VRCScore > VRCScorePtr;
typedef boost::shared_ptr< ::atlas_msgs::VRCScore const> VRCScoreConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atlas_msgs::VRCScore_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atlas_msgs::VRCScore_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'atlas_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/atlas_msgs/msg', '/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/devel/share/atlas_msgs/msg'], 'sandia_hand_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/sandia-hand/ros/sandia_hand_msgs/msg'], 'osrf_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/osrf-common/osrf_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'control_msgs': ['/opt/ros/indigo/share/control_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::VRCScore_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::VRCScore_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::VRCScore_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::VRCScore_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::VRCScore_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::VRCScore_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::VRCScore_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15d1f218676ad0e9382ec3bd7afd4995";
  }

  static const char* value(const ::atlas_msgs::VRCScore_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15d1f218676ad0e9ULL;
  static const uint64_t static_value2 = 0x382ec3bd7afd4995ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::VRCScore_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atlas_msgs/VRCScore";
  }

  static const char* value(const ::atlas_msgs::VRCScore_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::VRCScore_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Potential values for task_type\n\
uint32 TASK_OTHER = 0\n\
uint32 TASK_DRIVING = 1\n\
uint32 TASK_WALKING = 2\n\
uint32 TASK_MANIPULATION = 3\n\
# Absolute wall time\n\
time wall_time\n\
# Absolute sim time\n\
time sim_time\n\
# Wall time elapsed since passing the first gate\n\
time wall_time_elapsed\n\
# Sim time elapsed since passing the first gate\n\
time sim_time_elapsed\n\
# How many parts of the task have been accomplished (e.g., gates traversed)\n\
int32 completion_score\n\
# How many damaging falls detected\n\
int32 falls\n\
# Optional message to describe events\n\
string message\n\
# Which type of task\n\
uint32 task_type\n\
";
  }

  static const char* value(const ::atlas_msgs::VRCScore_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atlas_msgs::VRCScore_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wall_time);
      stream.next(m.sim_time);
      stream.next(m.wall_time_elapsed);
      stream.next(m.sim_time_elapsed);
      stream.next(m.completion_score);
      stream.next(m.falls);
      stream.next(m.message);
      stream.next(m.task_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VRCScore_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::VRCScore_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atlas_msgs::VRCScore_<ContainerAllocator>& v)
  {
    s << indent << "wall_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.wall_time);
    s << indent << "sim_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.sim_time);
    s << indent << "wall_time_elapsed: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.wall_time_elapsed);
    s << indent << "sim_time_elapsed: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.sim_time_elapsed);
    s << indent << "completion_score: ";
    Printer<int32_t>::stream(s, indent + "  ", v.completion_score);
    s << indent << "falls: ";
    Printer<int32_t>::stream(s, indent + "  ", v.falls);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "task_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.task_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_VRCSCORE_H
