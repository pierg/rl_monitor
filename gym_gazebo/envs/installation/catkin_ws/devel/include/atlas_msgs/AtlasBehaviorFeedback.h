// Generated by gencpp from file atlas_msgs/AtlasBehaviorFeedback.msg
// DO NOT EDIT!


#ifndef ATLAS_MSGS_MESSAGE_ATLASBEHAVIORFEEDBACK_H
#define ATLAS_MSGS_MESSAGE_ATLASBEHAVIORFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace atlas_msgs
{
template <class ContainerAllocator>
struct AtlasBehaviorFeedback_
{
  typedef AtlasBehaviorFeedback_<ContainerAllocator> Type;

  AtlasBehaviorFeedback_()
    : status_flags(0)
    , trans_from_behavior_index(0)
    , trans_to_behavior_index(0)  {
    }
  AtlasBehaviorFeedback_(const ContainerAllocator& _alloc)
    : status_flags(0)
    , trans_from_behavior_index(0)
    , trans_to_behavior_index(0)  {
  (void)_alloc;
    }



   typedef uint32_t _status_flags_type;
  _status_flags_type status_flags;

   typedef int32_t _trans_from_behavior_index_type;
  _trans_from_behavior_index_type trans_from_behavior_index;

   typedef int32_t _trans_to_behavior_index_type;
  _trans_to_behavior_index_type trans_to_behavior_index;


    enum { STATUS_OK = 0u };
     enum { STATUS_TRANSITION_IN_PROGRESS = 1u };
     enum { STATUS_TRANSITION_SUCCESS = 2u };
     enum { STATUS_FAILED_TRANS_UNKNOWN_BEHAVIOR = 4u };
     enum { STATUS_FAILED_TRANS_ILLEGAL_BEHAVIOR = 8u };
     enum { STATUS_FAILED_TRANS_COM_POS = 16u };
     enum { STATUS_FAILED_TRANS_COM_VEL = 32u };
     enum { STATUS_FAILED_TRANS_VEL = 64u };
     enum { STATUS_WARNING_AUTO_TRANS = 128u };
     enum { STATUS_ERROR_FALLING = 256u };
 

  typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct AtlasBehaviorFeedback_

typedef ::atlas_msgs::AtlasBehaviorFeedback_<std::allocator<void> > AtlasBehaviorFeedback;

typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorFeedback > AtlasBehaviorFeedbackPtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorFeedback const> AtlasBehaviorFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'atlas_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/atlas_msgs/msg', '/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/devel/share/atlas_msgs/msg'], 'sandia_hand_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/sandia-hand/ros/sandia_hand_msgs/msg'], 'osrf_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/osrf-common/osrf_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'control_msgs': ['/opt/ros/indigo/share/control_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7b1da61a8fcdd81f1e8d9a700d9d2bd";
  }

  static const char* value(const ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7b1da61a8fcdd81ULL;
  static const uint64_t static_value2 = 0xf1e8d9a700d9d2bdULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atlas_msgs/AtlasBehaviorFeedback";
  }

  static const char* value(const ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# mirrors AtlasBehaviorFeedback\n\
#\n\
# Transition flags:\n\
#    - STATUS_TRANSITION_IN_PROGRESS\n\
#\n\
#        A transition is in progress.\n\
#\n\
#    - STATUS_TRANSITION_SUCCESS\n\
#\n\
#        Successful transition.\n\
#\n\
#    - STATUS_FAILED_TRANS_UNKNOWN_BEHAVIOR\n\
#\n\
#        Failed to transition; unknown behavior.\n\
#\n\
#    - STATUS_FAILED_TRANS_ILLEGAL_BEHAVIOR\n\
#\n\
#        Denied request for an illegal behavior transition.  This may\n\
#        happen if a transition to a new behavior is requested without\n\
#        going through a required intermediate behavior. (e.g., can't\n\
#        go from Walk straight to Manipulate.)\n\
#\n\
#    - STATUS_FAILED_TRANS_COM_POS\n\
#\n\
#        Failed to transition; the position of the COM is too far from\n\
#        the center of support.\n\
#\n\
#    - STATUS_FAILED_TRANS_COM_VEL\n\
#\n\
#        Failed to transition; the COM velocity too high.\n\
#\n\
#    - STATUS_FAILED_TRANS_VEL\n\
#\n\
#        Failed to transition; some joint velocities too high.\n\
#\n\
#  \\em Warnings:\n\
#\n\
#    - STATUS_WARNING_AUTO_TRANS\n\
#\n\
#        An automatic transition occurred; see behavior specific\n\
#        feedback for reason.\n\
#\n\
#  \\em Errors:\n\
#\n\
#    - STATUS_ERROR_FALLING\n\
#\n\
#        COM below acceptable threshold, cannot recover.\n\
\n\
# copied from AtlasBehaviorFlags\n\
uint32 STATUS_OK                            = 0\n\
uint32 STATUS_TRANSITION_IN_PROGRESS        = 1\n\
uint32 STATUS_TRANSITION_SUCCESS            = 2\n\
uint32 STATUS_FAILED_TRANS_UNKNOWN_BEHAVIOR = 4\n\
uint32 STATUS_FAILED_TRANS_ILLEGAL_BEHAVIOR = 8\n\
uint32 STATUS_FAILED_TRANS_COM_POS          = 16\n\
uint32 STATUS_FAILED_TRANS_COM_VEL          = 32\n\
uint32 STATUS_FAILED_TRANS_VEL              = 64\n\
uint32 STATUS_WARNING_AUTO_TRANS            = 128\n\
uint32 STATUS_ERROR_FALLING                 = 256\n\
\n\
uint32 status_flags  # can be one of above\n\
\n\
int32 trans_from_behavior_index  # use this as a parm to get_behavior_at_index() to get behavior string\n\
int32 trans_to_behavior_index  # use this as a parm to get_behavior_at_index() to get behavior string\n\
";
  }

  static const char* value(const ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status_flags);
      stream.next(m.trans_from_behavior_index);
      stream.next(m.trans_to_behavior_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AtlasBehaviorFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atlas_msgs::AtlasBehaviorFeedback_<ContainerAllocator>& v)
  {
    s << indent << "status_flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.status_flags);
    s << indent << "trans_from_behavior_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trans_from_behavior_index);
    s << indent << "trans_to_behavior_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trans_to_behavior_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_ATLASBEHAVIORFEEDBACK_H
