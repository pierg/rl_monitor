// Generated by gencpp from file atlas_msgs/AtlasFiltersRequest.msg
// DO NOT EDIT!


#ifndef ATLAS_MSGS_MESSAGE_ATLASFILTERSREQUEST_H
#define ATLAS_MSGS_MESSAGE_ATLASFILTERSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace atlas_msgs
{
template <class ContainerAllocator>
struct AtlasFiltersRequest_
{
  typedef AtlasFiltersRequest_<ContainerAllocator> Type;

  AtlasFiltersRequest_()
    : coef_a()
    , coef_b()
    , filter_velocity(false)
    , filter_position(false)  {
    }
  AtlasFiltersRequest_(const ContainerAllocator& _alloc)
    : coef_a(_alloc)
    , coef_b(_alloc)
    , filter_velocity(false)
    , filter_position(false)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _coef_a_type;
  _coef_a_type coef_a;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _coef_b_type;
  _coef_b_type coef_b;

   typedef uint8_t _filter_velocity_type;
  _filter_velocity_type filter_velocity;

   typedef uint8_t _filter_position_type;
  _filter_position_type filter_position;




  typedef boost::shared_ptr< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AtlasFiltersRequest_

typedef ::atlas_msgs::AtlasFiltersRequest_<std::allocator<void> > AtlasFiltersRequest;

typedef boost::shared_ptr< ::atlas_msgs::AtlasFiltersRequest > AtlasFiltersRequestPtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasFiltersRequest const> AtlasFiltersRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'atlas_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/atlas_msgs/msg', '/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/devel/share/atlas_msgs/msg'], 'sandia_hand_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/sandia-hand/ros/sandia_hand_msgs/msg'], 'osrf_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/osrf-common/osrf_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'control_msgs': ['/opt/ros/indigo/share/control_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "271d7f8e4a68b57888389ab6ce3a31b9";
  }

  static const char* value(const ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x271d7f8e4a68b578ULL;
  static const uint64_t static_value2 = 0x88389ab6ce3a31b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atlas_msgs/AtlasFiltersRequest";
  }

  static const char* value(const ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
float64[] coef_a\n\
\n\
\n\
float64[] coef_b\n\
\n\
\n\
\n\
bool filter_velocity\n\
bool filter_position\n\
\n\
";
  }

  static const char* value(const ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.coef_a);
      stream.next(m.coef_b);
      stream.next(m.filter_velocity);
      stream.next(m.filter_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AtlasFiltersRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atlas_msgs::AtlasFiltersRequest_<ContainerAllocator>& v)
  {
    s << indent << "coef_a[]" << std::endl;
    for (size_t i = 0; i < v.coef_a.size(); ++i)
    {
      s << indent << "  coef_a[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.coef_a[i]);
    }
    s << indent << "coef_b[]" << std::endl;
    for (size_t i = 0; i < v.coef_b.size(); ++i)
    {
      s << indent << "  coef_b[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.coef_b[i]);
    }
    s << indent << "filter_velocity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.filter_velocity);
    s << indent << "filter_position: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.filter_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_ATLASFILTERSREQUEST_H
