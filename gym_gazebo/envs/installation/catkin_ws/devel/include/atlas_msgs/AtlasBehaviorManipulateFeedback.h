// Generated by gencpp from file atlas_msgs/AtlasBehaviorManipulateFeedback.msg
// DO NOT EDIT!


#ifndef ATLAS_MSGS_MESSAGE_ATLASBEHAVIORMANIPULATEFEEDBACK_H
#define ATLAS_MSGS_MESSAGE_ATLASBEHAVIORMANIPULATEFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <atlas_msgs/AtlasBehaviorPelvisServoParams.h>

namespace atlas_msgs
{
template <class ContainerAllocator>
struct AtlasBehaviorManipulateFeedback_
{
  typedef AtlasBehaviorManipulateFeedback_<ContainerAllocator> Type;

  AtlasBehaviorManipulateFeedback_()
    : status_flags(0)
    , clamped()  {
    }
  AtlasBehaviorManipulateFeedback_(const ContainerAllocator& _alloc)
    : status_flags(0)
    , clamped(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _status_flags_type;
  _status_flags_type status_flags;

   typedef  ::atlas_msgs::AtlasBehaviorPelvisServoParams_<ContainerAllocator>  _clamped_type;
  _clamped_type clamped;




  typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct AtlasBehaviorManipulateFeedback_

typedef ::atlas_msgs::AtlasBehaviorManipulateFeedback_<std::allocator<void> > AtlasBehaviorManipulateFeedback;

typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorManipulateFeedback > AtlasBehaviorManipulateFeedbackPtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorManipulateFeedback const> AtlasBehaviorManipulateFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'atlas_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/atlas_msgs/msg', '/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/devel/share/atlas_msgs/msg'], 'sandia_hand_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/sandia-hand/ros/sandia_hand_msgs/msg'], 'osrf_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/osrf-common/osrf_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'control_msgs': ['/opt/ros/indigo/share/control_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4f41aa2a4f2626090da8f54cf08b3c9";
  }

  static const char* value(const ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4f41aa2a4f26260ULL;
  static const uint64_t static_value2 = 0x90da8f54cf08b3c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atlas_msgs/AtlasBehaviorManipulateFeedback";
  }

  static const char* value(const ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# mirrored from AtlasControlTypes.h\n\
uint32 status_flags    # use AtlasBeahviorManipulateFlags\n\
atlas_msgs/AtlasBehaviorPelvisServoParams clamped\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasBehaviorPelvisServoParams\n\
# mirrored from AtlasControlTypes.h\n\
\n\
float64 pelvis_height\n\
float64 pelvis_yaw\n\
\n\
float64 pelvis_lat  # deprecated Atlas V3\n\
\n\
float64 pelvis_pitch\n\
float64 pelvis_roll\n\
float64 com_v0\n\
float64 com_v1\n\
";
  }

  static const char* value(const ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status_flags);
      stream.next(m.clamped);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AtlasBehaviorManipulateFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atlas_msgs::AtlasBehaviorManipulateFeedback_<ContainerAllocator>& v)
  {
    s << indent << "status_flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.status_flags);
    s << indent << "clamped: ";
    s << std::endl;
    Printer< ::atlas_msgs::AtlasBehaviorPelvisServoParams_<ContainerAllocator> >::stream(s, indent + "  ", v.clamped);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_ATLASBEHAVIORMANIPULATEFEEDBACK_H
