// Generated by gencpp from file atlas_msgs/GetJointDampingResponse.msg
// DO NOT EDIT!


#ifndef ATLAS_MSGS_MESSAGE_GETJOINTDAMPINGRESPONSE_H
#define ATLAS_MSGS_MESSAGE_GETJOINTDAMPINGRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace atlas_msgs
{
template <class ContainerAllocator>
struct GetJointDampingResponse_
{
  typedef GetJointDampingResponse_<ContainerAllocator> Type;

  GetJointDampingResponse_()
    : damping_coefficients()
    , damping_coefficients_min()
    , damping_coefficients_max()
    , success(false)
    , status_message()  {
      damping_coefficients.assign(0.0);

      damping_coefficients_min.assign(0.0);

      damping_coefficients_max.assign(0.0);
  }
  GetJointDampingResponse_(const ContainerAllocator& _alloc)
    : damping_coefficients()
    , damping_coefficients_min()
    , damping_coefficients_max()
    , success(false)
    , status_message(_alloc)  {
  (void)_alloc;
      damping_coefficients.assign(0.0);

      damping_coefficients_min.assign(0.0);

      damping_coefficients_max.assign(0.0);
  }



   typedef boost::array<double, 30>  _damping_coefficients_type;
  _damping_coefficients_type damping_coefficients;

   typedef boost::array<double, 30>  _damping_coefficients_min_type;
  _damping_coefficients_min_type damping_coefficients_min;

   typedef boost::array<double, 30>  _damping_coefficients_max_type;
  _damping_coefficients_max_type damping_coefficients_max;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_message_type;
  _status_message_type status_message;




  typedef boost::shared_ptr< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetJointDampingResponse_

typedef ::atlas_msgs::GetJointDampingResponse_<std::allocator<void> > GetJointDampingResponse;

typedef boost::shared_ptr< ::atlas_msgs::GetJointDampingResponse > GetJointDampingResponsePtr;
typedef boost::shared_ptr< ::atlas_msgs::GetJointDampingResponse const> GetJointDampingResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'atlas_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/atlas_msgs/msg', '/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/devel/share/atlas_msgs/msg'], 'sandia_hand_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/sandia-hand/ros/sandia_hand_msgs/msg'], 'osrf_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/osrf-common/osrf_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'control_msgs': ['/opt/ros/indigo/share/control_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac3412a634e22520e6b32a1a83777a10";
  }

  static const char* value(const ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac3412a634e22520ULL;
  static const uint64_t static_value2 = 0xe6b32a1a83777a10ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atlas_msgs/GetJointDampingResponse";
  }

  static const char* value(const ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
float64[30] damping_coefficients\n\
float64[30] damping_coefficients_min\n\
float64[30] damping_coefficients_max\n\
bool success\n\
string status_message\n\
\n\
\n\
";
  }

  static const char* value(const ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.damping_coefficients);
      stream.next(m.damping_coefficients_min);
      stream.next(m.damping_coefficients_max);
      stream.next(m.success);
      stream.next(m.status_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetJointDampingResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atlas_msgs::GetJointDampingResponse_<ContainerAllocator>& v)
  {
    s << indent << "damping_coefficients[]" << std::endl;
    for (size_t i = 0; i < v.damping_coefficients.size(); ++i)
    {
      s << indent << "  damping_coefficients[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.damping_coefficients[i]);
    }
    s << indent << "damping_coefficients_min[]" << std::endl;
    for (size_t i = 0; i < v.damping_coefficients_min.size(); ++i)
    {
      s << indent << "  damping_coefficients_min[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.damping_coefficients_min[i]);
    }
    s << indent << "damping_coefficients_max[]" << std::endl;
    for (size_t i = 0; i < v.damping_coefficients_max.size(); ++i)
    {
      s << indent << "  damping_coefficients_max[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.damping_coefficients_max[i]);
    }
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "status_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_GETJOINTDAMPINGRESPONSE_H
