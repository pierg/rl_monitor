// Generated by gencpp from file atlas_msgs/ResetControlsRequest.msg
// DO NOT EDIT!


#ifndef ATLAS_MSGS_MESSAGE_RESETCONTROLSREQUEST_H
#define ATLAS_MSGS_MESSAGE_RESETCONTROLSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <atlas_msgs/AtlasCommand.h>

namespace atlas_msgs
{
template <class ContainerAllocator>
struct ResetControlsRequest_
{
  typedef ResetControlsRequest_<ContainerAllocator> Type;

  ResetControlsRequest_()
    : reset_bdi_controller(false)
    , reset_pid_controller(false)
    , reload_pid_from_ros(false)
    , atlas_command()  {
    }
  ResetControlsRequest_(const ContainerAllocator& _alloc)
    : reset_bdi_controller(false)
    , reset_pid_controller(false)
    , reload_pid_from_ros(false)
    , atlas_command(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _reset_bdi_controller_type;
  _reset_bdi_controller_type reset_bdi_controller;

   typedef uint8_t _reset_pid_controller_type;
  _reset_pid_controller_type reset_pid_controller;

   typedef uint8_t _reload_pid_from_ros_type;
  _reload_pid_from_ros_type reload_pid_from_ros;

   typedef  ::atlas_msgs::AtlasCommand_<ContainerAllocator>  _atlas_command_type;
  _atlas_command_type atlas_command;




  typedef boost::shared_ptr< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ResetControlsRequest_

typedef ::atlas_msgs::ResetControlsRequest_<std::allocator<void> > ResetControlsRequest;

typedef boost::shared_ptr< ::atlas_msgs::ResetControlsRequest > ResetControlsRequestPtr;
typedef boost::shared_ptr< ::atlas_msgs::ResetControlsRequest const> ResetControlsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'atlas_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/atlas_msgs/msg', '/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/devel/share/atlas_msgs/msg'], 'sandia_hand_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/sandia-hand/ros/sandia_hand_msgs/msg'], 'osrf_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/osrf-common/osrf_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'control_msgs': ['/opt/ros/indigo/share/control_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e1b433362be65dc5221281baedaa897";
  }

  static const char* value(const ::atlas_msgs::ResetControlsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e1b433362be65dcULL;
  static const uint64_t static_value2 = 0x5221281baedaa897ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atlas_msgs/ResetControlsRequest";
  }

  static const char* value(const ::atlas_msgs::ResetControlsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
bool reset_bdi_controller\n\
bool reset_pid_controller\n\
bool reload_pid_from_ros\n\
atlas_msgs/AtlasCommand atlas_command\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: atlas_msgs/AtlasCommand\n\
# Joint Command Message\n\
# This structure contains the gains to be applied to a joint.\n\
# The controller is a PID with feedforward desired torque:\n\
#\n\
# This message has been carefully constructed to be less\n\
# than 1500 in size when serialized, to accommodate transfer\n\
# UDP.\n\
#\n\
#   k_effort * (\n\
#     kp_position     * ( position - measured_position )       +\n\
#     ki_position     * 1/s * ( position - measured_position ) +\n\
#     kd_position     * s * ( position - measured_position ) +\n\
#     kp_velocity     * ( velocity - measured_velocity )     +\n\
#     effort ) +\n\
#   (1 - k_effort)  * effort_bdi\n\
#\n\
#  Where effort_bdi comes from AtlasSimInterface Dynamics Behavior Library.\n\
#\n\
Header header\n\
\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
float32[] kp_position\n\
float32[] ki_position\n\
float32[] kd_position\n\
float32[] kp_velocity\n\
uint8[] k_effort       # k_effort can be an unsigned int 8value from 0 to 255, \n\
                       # at run time, a double between 0 and 1 is obtained\n\
                       # by dividing by 255.0d.\n\
\n\
float32[] i_effort_min\n\
float32[] i_effort_max\n\
\n\
uint8 desired_controller_period_ms # max allowed controller update period in milli-seconds simulation time for controller synchronization.  See SynchronizationStatistics.msg for tracking synchronization status.\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::atlas_msgs::ResetControlsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reset_bdi_controller);
      stream.next(m.reset_pid_controller);
      stream.next(m.reload_pid_from_ros);
      stream.next(m.atlas_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResetControlsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::ResetControlsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atlas_msgs::ResetControlsRequest_<ContainerAllocator>& v)
  {
    s << indent << "reset_bdi_controller: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_bdi_controller);
    s << indent << "reset_pid_controller: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_pid_controller);
    s << indent << "reload_pid_from_ros: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reload_pid_from_ros);
    s << indent << "atlas_command: ";
    s << std::endl;
    Printer< ::atlas_msgs::AtlasCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.atlas_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_RESETCONTROLSREQUEST_H
