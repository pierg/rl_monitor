// Generated by gencpp from file atlas_msgs/AtlasBehaviorStandParams.msg
// DO NOT EDIT!


#ifndef ATLAS_MSGS_MESSAGE_ATLASBEHAVIORSTANDPARAMS_H
#define ATLAS_MSGS_MESSAGE_ATLASBEHAVIORSTANDPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace atlas_msgs
{
template <class ContainerAllocator>
struct AtlasBehaviorStandParams_
{
  typedef AtlasBehaviorStandParams_<ContainerAllocator> Type;

  AtlasBehaviorStandParams_()
    : placeholder(0)  {
    }
  AtlasBehaviorStandParams_(const ContainerAllocator& _alloc)
    : placeholder(0)  {
  (void)_alloc;
    }



   typedef int32_t _placeholder_type;
  _placeholder_type placeholder;




  typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> const> ConstPtr;

}; // struct AtlasBehaviorStandParams_

typedef ::atlas_msgs::AtlasBehaviorStandParams_<std::allocator<void> > AtlasBehaviorStandParams;

typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorStandParams > AtlasBehaviorStandParamsPtr;
typedef boost::shared_ptr< ::atlas_msgs::AtlasBehaviorStandParams const> AtlasBehaviorStandParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace atlas_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'atlas_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/drcsim/atlas_msgs/msg', '/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/devel/share/atlas_msgs/msg'], 'sandia_hand_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/sandia-hand/ros/sandia_hand_msgs/msg'], 'osrf_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/osrf-common/osrf_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'control_msgs': ['/opt/ros/indigo/share/control_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "569a10f839b2e1ce334950a722d388b4";
  }

  static const char* value(const ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x569a10f839b2e1ceULL;
  static const uint64_t static_value2 = 0x334950a722d388b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atlas_msgs/AtlasBehaviorStandParams";
  }

  static const char* value(const ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# stand parameters\n\
int32 placeholder\n\
# etc., more to come\n\
";
  }

  static const char* value(const ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.placeholder);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AtlasBehaviorStandParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atlas_msgs::AtlasBehaviorStandParams_<ContainerAllocator>& v)
  {
    s << indent << "placeholder: ";
    Printer<int32_t>::stream(s, indent + "  ", v.placeholder);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATLAS_MSGS_MESSAGE_ATLASBEHAVIORSTANDPARAMS_H
