// Generated by gencpp from file sandia_hand_msgs/SetParametersRequest.msg
// DO NOT EDIT!


#ifndef SANDIA_HAND_MSGS_MESSAGE_SETPARAMETERSREQUEST_H
#define SANDIA_HAND_MSGS_MESSAGE_SETPARAMETERSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sandia_hand_msgs/Parameter.h>

namespace sandia_hand_msgs
{
template <class ContainerAllocator>
struct SetParametersRequest_
{
  typedef SetParametersRequest_<ContainerAllocator> Type;

  SetParametersRequest_()
    : parameters()  {
    }
  SetParametersRequest_(const ContainerAllocator& _alloc)
    : parameters(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::sandia_hand_msgs::Parameter_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sandia_hand_msgs::Parameter_<ContainerAllocator> >::other >  _parameters_type;
  _parameters_type parameters;




  typedef boost::shared_ptr< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetParametersRequest_

typedef ::sandia_hand_msgs::SetParametersRequest_<std::allocator<void> > SetParametersRequest;

typedef boost::shared_ptr< ::sandia_hand_msgs::SetParametersRequest > SetParametersRequestPtr;
typedef boost::shared_ptr< ::sandia_hand_msgs::SetParametersRequest const> SetParametersRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sandia_hand_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sandia_hand_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/sandia-hand/ros/sandia_hand_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3172d4a360e8436e86e2c2ce94e05157";
  }

  static const char* value(const ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3172d4a360e8436eULL;
  static const uint64_t static_value2 = 0x86e2c2ce94e05157ULL;
};

template<class ContainerAllocator>
struct DataType< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sandia_hand_msgs/SetParametersRequest";
  }

  static const char* value(const ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Parameter[] parameters\n\
\n\
================================================================================\n\
MSG: sandia_hand_msgs/Parameter\n\
string  name\n\
byte    INTEGER=1\n\
byte    FLOAT=2\n\
byte    val_type\n\
uint32  i_val\n\
float32 f_val\n\
";
  }

  static const char* value(const ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetParametersRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sandia_hand_msgs::SetParametersRequest_<ContainerAllocator>& v)
  {
    s << indent << "parameters[]" << std::endl;
    for (size_t i = 0; i < v.parameters.size(); ++i)
    {
      s << indent << "  parameters[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sandia_hand_msgs::Parameter_<ContainerAllocator> >::stream(s, indent + "    ", v.parameters[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SANDIA_HAND_MSGS_MESSAGE_SETPARAMETERSREQUEST_H
