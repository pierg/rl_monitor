// Generated by gencpp from file sandia_hand_msgs/CalFingerState.msg
// DO NOT EDIT!


#ifndef SANDIA_HAND_MSGS_MESSAGE_CALFINGERSTATE_H
#define SANDIA_HAND_MSGS_MESSAGE_CALFINGERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sandia_hand_msgs
{
template <class ContainerAllocator>
struct CalFingerState_
{
  typedef CalFingerState_<ContainerAllocator> Type;

  CalFingerState_()
    : fmcb_time(0.0)
    , pp_time(0.0)
    , dp_time(0.0)
    , pp_tactile()
    , dp_tactile()
    , pp_strain(0.0)
    , mm_accel()
    , pp_accel()
    , dp_accel()
    , mm_mag()
    , pp_mag()
    , dp_mag()
    , pp_temp()
    , dp_temp()
    , fmcb_temp()
    , fmcb_voltage(0.0)
    , fmcb_pb_current(0.0)
    , hall_tgt()
    , hall_pos()
    , fmcb_effort()
    , joints_hall()
    , joints_inertial()
    , joints_inertial_variance()  {
      pp_tactile.assign(0.0);

      dp_tactile.assign(0.0);

      mm_accel.assign(0.0);

      pp_accel.assign(0.0);

      dp_accel.assign(0.0);

      mm_mag.assign(0.0);

      pp_mag.assign(0.0);

      dp_mag.assign(0.0);

      pp_temp.assign(0.0);

      dp_temp.assign(0.0);

      fmcb_temp.assign(0.0);

      hall_tgt.assign(0);

      hall_pos.assign(0);

      fmcb_effort.assign(0);

      joints_hall.assign(0.0);

      joints_inertial.assign(0.0);

      joints_inertial_variance.assign(0.0);
  }
  CalFingerState_(const ContainerAllocator& _alloc)
    : fmcb_time(0.0)
    , pp_time(0.0)
    , dp_time(0.0)
    , pp_tactile()
    , dp_tactile()
    , pp_strain(0.0)
    , mm_accel()
    , pp_accel()
    , dp_accel()
    , mm_mag()
    , pp_mag()
    , dp_mag()
    , pp_temp()
    , dp_temp()
    , fmcb_temp()
    , fmcb_voltage(0.0)
    , fmcb_pb_current(0.0)
    , hall_tgt()
    , hall_pos()
    , fmcb_effort()
    , joints_hall()
    , joints_inertial()
    , joints_inertial_variance()  {
  (void)_alloc;
      pp_tactile.assign(0.0);

      dp_tactile.assign(0.0);

      mm_accel.assign(0.0);

      pp_accel.assign(0.0);

      dp_accel.assign(0.0);

      mm_mag.assign(0.0);

      pp_mag.assign(0.0);

      dp_mag.assign(0.0);

      pp_temp.assign(0.0);

      dp_temp.assign(0.0);

      fmcb_temp.assign(0.0);

      hall_tgt.assign(0);

      hall_pos.assign(0);

      fmcb_effort.assign(0);

      joints_hall.assign(0.0);

      joints_inertial.assign(0.0);

      joints_inertial_variance.assign(0.0);
  }



   typedef double _fmcb_time_type;
  _fmcb_time_type fmcb_time;

   typedef double _pp_time_type;
  _pp_time_type pp_time;

   typedef double _dp_time_type;
  _dp_time_type dp_time;

   typedef boost::array<float, 6>  _pp_tactile_type;
  _pp_tactile_type pp_tactile;

   typedef boost::array<float, 12>  _dp_tactile_type;
  _dp_tactile_type dp_tactile;

   typedef float _pp_strain_type;
  _pp_strain_type pp_strain;

   typedef boost::array<float, 3>  _mm_accel_type;
  _mm_accel_type mm_accel;

   typedef boost::array<float, 3>  _pp_accel_type;
  _pp_accel_type pp_accel;

   typedef boost::array<float, 3>  _dp_accel_type;
  _dp_accel_type dp_accel;

   typedef boost::array<float, 3>  _mm_mag_type;
  _mm_mag_type mm_mag;

   typedef boost::array<float, 3>  _pp_mag_type;
  _pp_mag_type pp_mag;

   typedef boost::array<float, 3>  _dp_mag_type;
  _dp_mag_type dp_mag;

   typedef boost::array<float, 4>  _pp_temp_type;
  _pp_temp_type pp_temp;

   typedef boost::array<float, 4>  _dp_temp_type;
  _dp_temp_type dp_temp;

   typedef boost::array<float, 3>  _fmcb_temp_type;
  _fmcb_temp_type fmcb_temp;

   typedef float _fmcb_voltage_type;
  _fmcb_voltage_type fmcb_voltage;

   typedef float _fmcb_pb_current_type;
  _fmcb_pb_current_type fmcb_pb_current;

   typedef boost::array<int32_t, 3>  _hall_tgt_type;
  _hall_tgt_type hall_tgt;

   typedef boost::array<int32_t, 3>  _hall_pos_type;
  _hall_pos_type hall_pos;

   typedef boost::array<int16_t, 3>  _fmcb_effort_type;
  _fmcb_effort_type fmcb_effort;

   typedef boost::array<float, 3>  _joints_hall_type;
  _joints_hall_type joints_hall;

   typedef boost::array<float, 3>  _joints_inertial_type;
  _joints_inertial_type joints_inertial;

   typedef boost::array<float, 3>  _joints_inertial_variance_type;
  _joints_inertial_variance_type joints_inertial_variance;




  typedef boost::shared_ptr< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> const> ConstPtr;

}; // struct CalFingerState_

typedef ::sandia_hand_msgs::CalFingerState_<std::allocator<void> > CalFingerState;

typedef boost::shared_ptr< ::sandia_hand_msgs::CalFingerState > CalFingerStatePtr;
typedef boost::shared_ptr< ::sandia_hand_msgs::CalFingerState const> CalFingerStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sandia_hand_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sandia_hand_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/sandia-hand/ros/sandia_hand_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6c255966d7401429661c8a57b905e54";
  }

  static const char* value(const ::sandia_hand_msgs::CalFingerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6c255966d740142ULL;
  static const uint64_t static_value2 = 0x9661c8a57b905e54ULL;
};

template<class ContainerAllocator>
struct DataType< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sandia_hand_msgs/CalFingerState";
  }

  static const char* value(const ::sandia_hand_msgs::CalFingerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 fmcb_time\n\
float64 pp_time\n\
float64 dp_time\n\
float32[6]  pp_tactile\n\
float32[12] dp_tactile\n\
float32 pp_strain\n\
float32[3] mm_accel\n\
float32[3] pp_accel\n\
float32[3] dp_accel\n\
float32[3] mm_mag\n\
float32[3] pp_mag\n\
float32[3] dp_mag\n\
float32[4] pp_temp\n\
float32[4] dp_temp\n\
float32[3] fmcb_temp\n\
float32 fmcb_voltage\n\
float32 fmcb_pb_current\n\
int32[3] hall_tgt\n\
int32[3] hall_pos\n\
int16[3] fmcb_effort\n\
float32[3] joints_hall\n\
float32[3] joints_inertial\n\
float32[3] joints_inertial_variance\n\
";
  }

  static const char* value(const ::sandia_hand_msgs::CalFingerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fmcb_time);
      stream.next(m.pp_time);
      stream.next(m.dp_time);
      stream.next(m.pp_tactile);
      stream.next(m.dp_tactile);
      stream.next(m.pp_strain);
      stream.next(m.mm_accel);
      stream.next(m.pp_accel);
      stream.next(m.dp_accel);
      stream.next(m.mm_mag);
      stream.next(m.pp_mag);
      stream.next(m.dp_mag);
      stream.next(m.pp_temp);
      stream.next(m.dp_temp);
      stream.next(m.fmcb_temp);
      stream.next(m.fmcb_voltage);
      stream.next(m.fmcb_pb_current);
      stream.next(m.hall_tgt);
      stream.next(m.hall_pos);
      stream.next(m.fmcb_effort);
      stream.next(m.joints_hall);
      stream.next(m.joints_inertial);
      stream.next(m.joints_inertial_variance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CalFingerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sandia_hand_msgs::CalFingerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sandia_hand_msgs::CalFingerState_<ContainerAllocator>& v)
  {
    s << indent << "fmcb_time: ";
    Printer<double>::stream(s, indent + "  ", v.fmcb_time);
    s << indent << "pp_time: ";
    Printer<double>::stream(s, indent + "  ", v.pp_time);
    s << indent << "dp_time: ";
    Printer<double>::stream(s, indent + "  ", v.dp_time);
    s << indent << "pp_tactile[]" << std::endl;
    for (size_t i = 0; i < v.pp_tactile.size(); ++i)
    {
      s << indent << "  pp_tactile[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pp_tactile[i]);
    }
    s << indent << "dp_tactile[]" << std::endl;
    for (size_t i = 0; i < v.dp_tactile.size(); ++i)
    {
      s << indent << "  dp_tactile[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dp_tactile[i]);
    }
    s << indent << "pp_strain: ";
    Printer<float>::stream(s, indent + "  ", v.pp_strain);
    s << indent << "mm_accel[]" << std::endl;
    for (size_t i = 0; i < v.mm_accel.size(); ++i)
    {
      s << indent << "  mm_accel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mm_accel[i]);
    }
    s << indent << "pp_accel[]" << std::endl;
    for (size_t i = 0; i < v.pp_accel.size(); ++i)
    {
      s << indent << "  pp_accel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pp_accel[i]);
    }
    s << indent << "dp_accel[]" << std::endl;
    for (size_t i = 0; i < v.dp_accel.size(); ++i)
    {
      s << indent << "  dp_accel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dp_accel[i]);
    }
    s << indent << "mm_mag[]" << std::endl;
    for (size_t i = 0; i < v.mm_mag.size(); ++i)
    {
      s << indent << "  mm_mag[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mm_mag[i]);
    }
    s << indent << "pp_mag[]" << std::endl;
    for (size_t i = 0; i < v.pp_mag.size(); ++i)
    {
      s << indent << "  pp_mag[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pp_mag[i]);
    }
    s << indent << "dp_mag[]" << std::endl;
    for (size_t i = 0; i < v.dp_mag.size(); ++i)
    {
      s << indent << "  dp_mag[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dp_mag[i]);
    }
    s << indent << "pp_temp[]" << std::endl;
    for (size_t i = 0; i < v.pp_temp.size(); ++i)
    {
      s << indent << "  pp_temp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pp_temp[i]);
    }
    s << indent << "dp_temp[]" << std::endl;
    for (size_t i = 0; i < v.dp_temp.size(); ++i)
    {
      s << indent << "  dp_temp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dp_temp[i]);
    }
    s << indent << "fmcb_temp[]" << std::endl;
    for (size_t i = 0; i < v.fmcb_temp.size(); ++i)
    {
      s << indent << "  fmcb_temp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.fmcb_temp[i]);
    }
    s << indent << "fmcb_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.fmcb_voltage);
    s << indent << "fmcb_pb_current: ";
    Printer<float>::stream(s, indent + "  ", v.fmcb_pb_current);
    s << indent << "hall_tgt[]" << std::endl;
    for (size_t i = 0; i < v.hall_tgt.size(); ++i)
    {
      s << indent << "  hall_tgt[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.hall_tgt[i]);
    }
    s << indent << "hall_pos[]" << std::endl;
    for (size_t i = 0; i < v.hall_pos.size(); ++i)
    {
      s << indent << "  hall_pos[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.hall_pos[i]);
    }
    s << indent << "fmcb_effort[]" << std::endl;
    for (size_t i = 0; i < v.fmcb_effort.size(); ++i)
    {
      s << indent << "  fmcb_effort[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.fmcb_effort[i]);
    }
    s << indent << "joints_hall[]" << std::endl;
    for (size_t i = 0; i < v.joints_hall.size(); ++i)
    {
      s << indent << "  joints_hall[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joints_hall[i]);
    }
    s << indent << "joints_inertial[]" << std::endl;
    for (size_t i = 0; i < v.joints_inertial.size(); ++i)
    {
      s << indent << "  joints_inertial[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joints_inertial[i]);
    }
    s << indent << "joints_inertial_variance[]" << std::endl;
    for (size_t i = 0; i < v.joints_inertial_variance.size(); ++i)
    {
      s << indent << "  joints_inertial_variance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joints_inertial_variance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SANDIA_HAND_MSGS_MESSAGE_CALFINGERSTATE_H
