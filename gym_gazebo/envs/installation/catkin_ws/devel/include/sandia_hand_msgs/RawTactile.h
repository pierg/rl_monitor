// Generated by gencpp from file sandia_hand_msgs/RawTactile.msg
// DO NOT EDIT!


#ifndef SANDIA_HAND_MSGS_MESSAGE_RAWTACTILE_H
#define SANDIA_HAND_MSGS_MESSAGE_RAWTACTILE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sandia_hand_msgs
{
template <class ContainerAllocator>
struct RawTactile_
{
  typedef RawTactile_<ContainerAllocator> Type;

  RawTactile_()
    : header()
    , f0()
    , f1()
    , f2()
    , f3()
    , palm()  {
    }
  RawTactile_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , f0(_alloc)
    , f1(_alloc)
    , f2(_alloc)
    , f3(_alloc)
    , palm(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _f0_type;
  _f0_type f0;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _f1_type;
  _f1_type f1;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _f2_type;
  _f2_type f2;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _f3_type;
  _f3_type f3;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _palm_type;
  _palm_type palm;




  typedef boost::shared_ptr< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> const> ConstPtr;

}; // struct RawTactile_

typedef ::sandia_hand_msgs::RawTactile_<std::allocator<void> > RawTactile;

typedef boost::shared_ptr< ::sandia_hand_msgs::RawTactile > RawTactilePtr;
typedef boost::shared_ptr< ::sandia_hand_msgs::RawTactile const> RawTactileConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sandia_hand_msgs::RawTactile_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sandia_hand_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sandia_hand_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/sandia-hand/ros/sandia_hand_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54331defbac2dc0657220f19a2a8c2b4";
  }

  static const char* value(const ::sandia_hand_msgs::RawTactile_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54331defbac2dc06ULL;
  static const uint64_t static_value2 = 0x57220f19a2a8c2b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sandia_hand_msgs/RawTactile";
  }

  static const char* value(const ::sandia_hand_msgs::RawTactile_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
uint16[] f0\n\
uint16[] f1\n\
uint16[] f2\n\
uint16[] f3\n\
uint16[] palm\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::sandia_hand_msgs::RawTactile_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.f0);
      stream.next(m.f1);
      stream.next(m.f2);
      stream.next(m.f3);
      stream.next(m.palm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawTactile_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sandia_hand_msgs::RawTactile_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sandia_hand_msgs::RawTactile_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "f0[]" << std::endl;
    for (size_t i = 0; i < v.f0.size(); ++i)
    {
      s << indent << "  f0[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.f0[i]);
    }
    s << indent << "f1[]" << std::endl;
    for (size_t i = 0; i < v.f1.size(); ++i)
    {
      s << indent << "  f1[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.f1[i]);
    }
    s << indent << "f2[]" << std::endl;
    for (size_t i = 0; i < v.f2.size(); ++i)
    {
      s << indent << "  f2[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.f2[i]);
    }
    s << indent << "f3[]" << std::endl;
    for (size_t i = 0; i < v.f3.size(); ++i)
    {
      s << indent << "  f3[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.f3[i]);
    }
    s << indent << "palm[]" << std::endl;
    for (size_t i = 0; i < v.palm.size(); ++i)
    {
      s << indent << "  palm[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.palm[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SANDIA_HAND_MSGS_MESSAGE_RAWTACTILE_H
