// Generated by gencpp from file sandia_hand_msgs/RawFingerInertial.msg
// DO NOT EDIT!


#ifndef SANDIA_HAND_MSGS_MESSAGE_RAWFINGERINERTIAL_H
#define SANDIA_HAND_MSGS_MESSAGE_RAWFINGERINERTIAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sandia_hand_msgs
{
template <class ContainerAllocator>
struct RawFingerInertial_
{
  typedef RawFingerInertial_<ContainerAllocator> Type;

  RawFingerInertial_()
    : mm_accel()
    , pp_accel()
    , dp_accel()
    , mm_mag()
    , pp_mag()
    , dp_mag()  {
      mm_accel.assign(0);

      pp_accel.assign(0);

      dp_accel.assign(0);

      mm_mag.assign(0);

      pp_mag.assign(0);

      dp_mag.assign(0);
  }
  RawFingerInertial_(const ContainerAllocator& _alloc)
    : mm_accel()
    , pp_accel()
    , dp_accel()
    , mm_mag()
    , pp_mag()
    , dp_mag()  {
  (void)_alloc;
      mm_accel.assign(0);

      pp_accel.assign(0);

      dp_accel.assign(0);

      mm_mag.assign(0);

      pp_mag.assign(0);

      dp_mag.assign(0);
  }



   typedef boost::array<uint16_t, 3>  _mm_accel_type;
  _mm_accel_type mm_accel;

   typedef boost::array<uint16_t, 3>  _pp_accel_type;
  _pp_accel_type pp_accel;

   typedef boost::array<uint16_t, 3>  _dp_accel_type;
  _dp_accel_type dp_accel;

   typedef boost::array<uint16_t, 3>  _mm_mag_type;
  _mm_mag_type mm_mag;

   typedef boost::array<uint16_t, 3>  _pp_mag_type;
  _pp_mag_type pp_mag;

   typedef boost::array<uint16_t, 3>  _dp_mag_type;
  _dp_mag_type dp_mag;




  typedef boost::shared_ptr< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> const> ConstPtr;

}; // struct RawFingerInertial_

typedef ::sandia_hand_msgs::RawFingerInertial_<std::allocator<void> > RawFingerInertial;

typedef boost::shared_ptr< ::sandia_hand_msgs::RawFingerInertial > RawFingerInertialPtr;
typedef boost::shared_ptr< ::sandia_hand_msgs::RawFingerInertial const> RawFingerInertialConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sandia_hand_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sandia_hand_msgs': ['/home/chalmers/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/sandia-hand/ros/sandia_hand_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47495f9d3649f45640a29f32e4801b17";
  }

  static const char* value(const ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47495f9d3649f456ULL;
  static const uint64_t static_value2 = 0x40a29f32e4801b17ULL;
};

template<class ContainerAllocator>
struct DataType< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sandia_hand_msgs/RawFingerInertial";
  }

  static const char* value(const ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16[3] mm_accel\n\
uint16[3] pp_accel\n\
uint16[3] dp_accel\n\
uint16[3] mm_mag\n\
uint16[3] pp_mag\n\
uint16[3] dp_mag\n\
";
  }

  static const char* value(const ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mm_accel);
      stream.next(m.pp_accel);
      stream.next(m.dp_accel);
      stream.next(m.mm_mag);
      stream.next(m.pp_mag);
      stream.next(m.dp_mag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawFingerInertial_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator>& v)
  {
    s << indent << "mm_accel[]" << std::endl;
    for (size_t i = 0; i < v.mm_accel.size(); ++i)
    {
      s << indent << "  mm_accel[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.mm_accel[i]);
    }
    s << indent << "pp_accel[]" << std::endl;
    for (size_t i = 0; i < v.pp_accel.size(); ++i)
    {
      s << indent << "  pp_accel[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.pp_accel[i]);
    }
    s << indent << "dp_accel[]" << std::endl;
    for (size_t i = 0; i < v.dp_accel.size(); ++i)
    {
      s << indent << "  dp_accel[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.dp_accel[i]);
    }
    s << indent << "mm_mag[]" << std::endl;
    for (size_t i = 0; i < v.mm_mag.size(); ++i)
    {
      s << indent << "  mm_mag[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.mm_mag[i]);
    }
    s << indent << "pp_mag[]" << std::endl;
    for (size_t i = 0; i < v.pp_mag.size(); ++i)
    {
      s << indent << "  pp_mag[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.pp_mag[i]);
    }
    s << indent << "dp_mag[]" << std::endl;
    for (size_t i = 0; i < v.dp_mag.size(); ++i)
    {
      s << indent << "  dp_mag[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.dp_mag[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SANDIA_HAND_MSGS_MESSAGE_RAWFINGERINERTIAL_H
